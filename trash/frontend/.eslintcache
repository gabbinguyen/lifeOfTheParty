[{"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/App.js":"1","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Input/Input.js":"2","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Modals/ModalPD.js":"3","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Task/Task.js":"4","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/index.js":"5","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Login/Login.js":"6","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Landing/Landing.js":"7","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NavBars/LandingNav/NavBar.js":"8","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Dashboard/Dashboard.js":"9","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Project/Project.js":"10","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Modals/ModalTI.js":"11","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NavBars/ProjectNav/NavBar.js":"12","/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/TaskBucket/TaskBucket.js":"13"},{"size":693,"mtime":1611029882600,"results":"14","hashOfConfig":"15"},{"size":343,"mtime":1611029882604,"results":"16","hashOfConfig":"15"},{"size":790,"mtime":1611029882609,"results":"17","hashOfConfig":"15"},{"size":1020,"mtime":1611029882628,"results":"18","hashOfConfig":"15"},{"size":382,"mtime":1611029882630,"results":"19","hashOfConfig":"15"},{"size":1977,"mtime":1611075679002,"results":"20","hashOfConfig":"15"},{"size":348,"mtime":1611075491198,"results":"21","hashOfConfig":"15"},{"size":715,"mtime":1611029882616,"results":"22","hashOfConfig":"15"},{"size":1139,"mtime":1611076401568,"results":"23","hashOfConfig":"15"},{"size":10169,"mtime":1611029882623,"results":"24","hashOfConfig":"15"},{"size":4847,"mtime":1611029882612,"results":"25","hashOfConfig":"15"},{"size":1117,"mtime":1611029882617,"results":"26","hashOfConfig":"15"},{"size":2962,"mtime":1611029882629,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"svhfas",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/App.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Input/Input.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Modals/ModalPD.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Task/Task.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/index.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Login/Login.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Landing/Landing.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NavBars/LandingNav/NavBar.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Dashboard/Dashboard.js",["58"],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Pages/Project/Project.js",["59","60"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MdAdd } from 'react-icons/md';\nimport { MdClose } from 'react-icons/md';\nimport { IoLogoBitbucket } from 'react-icons/io';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './Project.css';\nimport NavBar from '../../NavBars/ProjectNav/NavBar';\nimport TaskBucket from '../../TaskBucket/TaskBucket';\nimport ModalPS from '../../Modals/ModalPS';\nimport ModalTI from '../../Modals/ModalTI';\nimport ModalTBD from '../../Modals/ModalTBD';\nimport ModalPD from '../../Modals/ModalPD';\n\nconst Project = props => {\n  let { id } = useParams();\n  const token = localStorage.getItem('token');\n\n  const [project, setProject] = useState({});\n  const [favorite, setFavorite] = useState(false);\n  const [projectMembers, setProjectMembers] = useState([]);\n  const [taskBuckets, setTaskBuckets] = useState([]);\n\n  // State: Project Settings Modal\n  const [modalPS, setModalPS] = useState(false);\n  const [modalPD, setModalPD] = useState(false);\n\n  // State: New Task Bucket states\n  const [newBucketActive, setNewBucketActive] = useState(false);\n  const [newBucketName, setNewBucketName] = useState('');\n\n  // State: Bucket Delete Confirmation Modal\n  const [modalTBD, setModalTBD] = useState(false);\n  const [clickedBucketDelete, setClickedBucketDelete] = useState({});\n\n  // State: Task Info or Data Modal\n  const [modalTI, setModalTI] = useState(false);\n  const [clickedTask, setClickedTask] = useState({});\n\n  // Fetch initial project data\n  useEffect(() => {\n    fetch(`http://localhost:3000/projects/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n      .then(res => res.json())\n      .then(project => {\n        setProject(project);\n        setFavorite(project.favorite);\n        setProjectMembers(project.project_members);\n        setTaskBuckets(project.task_buckets);\n      });\n  }, []);\n\n  const updateProjectInfo = info => {\n    fetch(`http://localhost:3000/projects/${project.id}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(info)\n    })\n      .then(res => res.json())\n      .then(project => setProject(project));\n  };\n\n  const deleteProject = () => {\n    fetch(`http://localhost:3000/projects/${project.id}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n      .then(res => res.json())\n      .then(res => {\n        if (res.success) {\n          props.history.push('/dashboard');\n        }\n      });\n  };\n\n  const handleCreateBucket = () => {\n    fetch(`http://localhost:3000/task_buckets`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        project_id: project.id,\n        name: newBucketName\n      })\n    })\n      .then(res => res.json())\n      .then(taskBucket => {\n        setTaskBuckets([...taskBuckets, taskBucket]);\n        setNewBucketName('');\n      });\n  };\n\n  // Creates new task for a bucket\n  const createNewTask = (task, bucket) => {\n    fetch('http://localhost:3000/tasks', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        bucket_id: bucket.id,\n        task_name: task\n      })\n    })\n      .then(res => res.json())\n      .then(taskBucket => {\n        const updatedBuckets = taskBuckets.map(bucket => {\n          let bucketCopy = { ...bucket };\n          if (bucketCopy.id === taskBucket.id) {\n            bucketCopy = taskBucket;\n          }\n          return bucketCopy;\n        });\n        setTaskBuckets(updatedBuckets);\n      });\n  };\n\n  // Modal popup for a specific task\n  const activateTaskModal = task => {\n    setModalTI(true);\n    setClickedTask(task);\n  };\n\n  // Updates any info or data for a task\n  const updateTaskInfo = (taskId, info, taskExtra = {}) => {\n    let taskPIBucketChange;\n    const { bucketChange, task, bucket } = taskExtra;\n    if (bucketChange) {\n      taskPIBucketChange = true;\n    }\n\n    fetch(`http://localhost:3000/tasks/${taskId}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(info)\n    })\n      .then(res => res.json())\n      .then(taskBucket => {\n        if (taskPIBucketChange) {\n          removeTaskFromBucket(task, bucket, taskBucket);\n        } else {\n          const updatedBuckets = taskBuckets.map(bucket => {\n            let bucketCopy = { ...bucket };\n            if (bucketCopy.id === taskBucket.id) {\n              bucketCopy = taskBucket;\n            }\n            return bucketCopy;\n          });\n          setTaskBuckets(updatedBuckets);\n        }\n      });\n  };\n\n  // Frontend: Moves task from one bucket to another\n  const removeTaskFromBucket = (task, bucket, newPIBucket) => {\n    const updatedTasks = bucket.tasks.filter(taskObj => taskObj.id !== task.id);\n    const upTasksForBuckets = taskBuckets.map(taskBucket => {\n      const bucketCopy = { ...taskBucket };\n      if (bucketCopy.id === bucket.id) {\n        bucketCopy.tasks = updatedTasks;\n      }\n      return bucketCopy;\n    });\n\n    const updatedBuckets = upTasksForBuckets.map(bucketObj => {\n      if (bucketObj.id === newPIBucket.id) {\n        bucketObj = newPIBucket;\n      }\n      return bucketObj;\n    });\n\n    setTaskBuckets(updatedBuckets);\n  };\n\n  // Bucket delete confirmation Modal\n  const bucketDeleteConf = bucket => {\n    setModalTBD(true);\n    setClickedBucketDelete(bucket);\n  };\n\n  // Deletes a task Bucket\n  const deleteTaskBucket = bucket => {\n    fetch(`http://localhost:3000/task_buckets/${bucket.id}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n      .then(res => res.json())\n      .then(project => {\n        const updatedBuckets = project.task_buckets;\n        setTaskBuckets(updatedBuckets);\n      });\n  };\n\n  // Updates a task Buckets Name\n  const updateBucketName = (bucket, name) => {\n    fetch(`http://localhost:3000/task_buckets/${bucket.id}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({ name })\n    });\n  };\n\n  return (\n    <>\n      <div className='project-show-page'>\n        <NavBar\n          project={project}\n          favorite={favorite}\n          projectMembers={projectMembers}\n          modalPS={() => setModalPS(true)}\n        />\n        <div className='project-contents-section'>\n          <div\n            className='pcs-project-banner'\n            style={{\n              backgroundImage: `url(${project.banner})`\n            }}\n          ></div>\n          <div className='project-task-buckets-container'>\n            {taskBuckets.map(taskBucket => (\n              <TaskBucket\n                key={taskBucket.id}\n                taskBucket={taskBucket}\n                createNewTask={createNewTask}\n                activateTaskModal={activateTaskModal}\n                bucketDeleteConf={bucketDeleteConf}\n                updateBucketName={updateBucketName}\n              />\n            ))}\n            <div className='task-bucket-wrapper'>\n              <div className='task-bucket'>\n                {newBucketActive ? (\n                  <div className='new-task-bucket-btn-active'>\n                    <input\n                      type='text'\n                      placeholder='Task bucket name...'\n                      value={newBucketName}\n                      onChange={e => setNewBucketName(e.target.value)}\n                      autoFocus\n                    />\n                    <div className='new-task-bucket-btn-controls'>\n                      <button onClick={handleCreateBucket}>\n                        Create bucket\n                      </button>\n                      <MdClose onClick={() => setNewBucketActive(false)} />\n                    </div>\n                  </div>\n                ) : (\n                  <div\n                    className='new-task-bucket-btn-wrapper'\n                    onClick={() => setNewBucketActive(true)}\n                  >\n                    <IoLogoBitbucket />\n                    <h4>New Task Bucket</h4>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Task Info Modal */}\n      <CSSTransition\n        in={modalTI}\n        classNames='modal-ti'\n        timeout={300}\n        unmountOnExit\n      >\n        <ModalTI\n          modalClose={() => setModalTI(false)}\n          updateTaskInfo={updateTaskInfo}\n          removeTaskFromBucket={removeTaskFromBucket}\n          task={clickedTask}\n          buckets={taskBuckets}\n        />\n      </CSSTransition>\n\n      {/* Task Bucket Delete mini popup */}\n      <CSSTransition\n        in={modalTBD}\n        classNames='modal-tbd'\n        timeout={300}\n        unmountOnExit\n      >\n        <ModalTBD\n          modalClose={() => setModalTBD(false)}\n          taskBucket={clickedBucketDelete}\n          deleteTaskBucket={deleteTaskBucket}\n        />\n      </CSSTransition>\n\n      {/* Project Settings Sidebar */}\n      <CSSTransition\n        in={modalPS}\n        classNames='sidebar-ps'\n        timeout={300}\n        unmountOnExit\n      >\n        <ModalPS\n          project={project}\n          updateProjectInfo={updateProjectInfo}\n          modalClose={() => setModalPS(false)}\n          projDeleteModal={() => setModalPD(true)}\n        />\n      </CSSTransition>\n\n      <CSSTransition\n        in={modalPD}\n        classNames='modal-pd'\n        timeout={300}\n        unmountOnExit\n      >\n        <ModalPD\n          deleteProject={deleteProject}\n          modalClose={() => setModalPD(false)}\n        />\n      </CSSTransition>\n    </>\n  );\n};\n\nexport default Project;\n",["61","62"],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/Modals/ModalTI.js",["63"],"import React, { useState, useEffect } from 'react';\nimport { MdSubtitles } from 'react-icons/md';\nimport { MdSubject } from 'react-icons/md';\nimport { MdClose } from 'react-icons/md';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Calendar } from 'primereact/calendar';\nimport { GrContactInfo } from 'react-icons/gr';\n\nimport './ModalTI.css';\n\nconst ModalTI = props => {\n  const task = props.task;\n  const buckets = props.buckets;\n\n  const [taskName, setTaskName] = useState(task.name);\n  const [taskDescription, setTaskDescription] = useState(task.description);\n  const [placedInBucket, setPlacedInBucket] = useState(task.task_bucket_id);\n  const [placedInBucketChanged, setPlacedInBucketChanged] = useState(false);\n  const [date, setDate] = useState('');\n  const [tdFocus, setTdFocus] = useState(false);\n\n  useEffect(() => {\n    if (task.due_date) {\n      const dueDate = new Date(task.due_date);\n      setDate(dueDate);\n    }\n  }, []);\n\n  const updateTaskName = () => {\n    if (taskName !== '') {\n      props.updateTaskInfo(task.id, { name: taskName });\n    }\n  };\n\n  const bucketDropdownChange = e => {\n    if (e.value !== task.task_bucket_id) {\n      setPlacedInBucketChanged(true);\n    } else if (e.value === task.task_bucket_id) {\n      setPlacedInBucketChanged(false);\n    }\n    setPlacedInBucket(e.value);\n  };\n\n  const updateTaskPIBucket = () => {\n    buckets.forEach(bucket => {\n      if (bucket.id === task.task_bucket_id) {\n        props.updateTaskInfo(\n          task.id,\n          { task_bucket_id: placedInBucket },\n          { bucketChange: true, task: task, bucket: bucket }\n        );\n      }\n    });\n\n    setPlacedInBucketChanged(false);\n  };\n\n  const updateTaskDueDate = e => {\n    const datetime = new Date(e.value);\n    const datetimeFormatted = datetime.toISOString();\n    if (datetimeFormatted) {\n      props.updateTaskInfo(task.id, { due_date: datetimeFormatted });\n    }\n    setDate(e.value);\n  };\n\n  const updateTaskDesc = () => {\n    if (taskDescription !== '') {\n      props.updateTaskInfo(task.id, { description: taskDescription });\n    }\n    setTdFocus(false);\n  };\n\n  return (\n    <div className='modal-window-overlay'>\n      <div className='modal-ti'>\n        <div className='modal-ti-close-wrapper' onClick={props.modalClose}>\n          <MdClose />\n        </div>\n        <div className='modal-ti-banner'></div>\n        <div className='modal-ti-body'>\n          <div className='modal-ti-task-name'>\n            <MdSubtitles />\n            <input\n              type='text'\n              value={taskName}\n              onChange={e => setTaskName(e.target.value)}\n              onBlur={updateTaskName}\n            />\n          </div>\n\n          <div className='modal-ti-task-items'>\n            <div className='bucket-dropdown'>\n              <h4>Bucket</h4>\n              <div className='bd-w-btn-wrapper'>\n                <Dropdown\n                  optionLabel='name'\n                  optionValue='id'\n                  value={placedInBucket}\n                  options={buckets}\n                  onChange={bucketDropdownChange}\n                />\n                {placedInBucketChanged ? (\n                  <button onClick={updateTaskPIBucket}>Move task</button>\n                ) : null}\n              </div>\n            </div>\n            <div className='duedate-dropdown'>\n              <h4>Due date</h4>\n              <Calendar\n                showIcon\n                showTime\n                showSeconds\n                showButtonBar\n                dateFormat='yy-mm-dd'\n                hourFormat='24'\n                value={date}\n                onChange={updateTaskDueDate}\n              ></Calendar>\n            </div>\n          </div>\n\n          <div className='modal-ti-task-description'>\n            <div className='modal-ti-td-title'>\n              <MdSubject />\n              <h3>Description</h3>\n            </div>\n            <div className='modal-ti-td-textarea'>\n              <textarea\n                onFocus={() => setTdFocus(true)}\n                onBlur={updateTaskDesc}\n                placeholder='Task description...'\n                value={taskDescription}\n                onChange={e => setTaskDescription(e.target.value)}\n              />\n              {tdFocus ? <button>Save</button> : null}\n            </div>\n          </div>\n\n          <div className='modal-ti-task-comments'>\n            <div className='modal-ti-tc-title'>\n              <GrContactInfo />\n              <h3>Comments</h3>\n            </div>\n            <div className='modal-ti-tc-textarea'>\n              <textarea placeholder='Type your message here' defaultValue='' />\n              <div className='comment-send-btn-wrapper'>\n                <button>Send</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalTI;\n",["64","65"],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NavBars/ProjectNav/NavBar.js",[],"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/TaskBucket/TaskBucket.js",[],{"ruleId":null,"fatal":true,"severity":2,"message":"66","line":22,"column":7},{"ruleId":"67","severity":1,"message":"68","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":55,"column":6,"nodeType":"73","endLine":55,"endColumn":8,"suggestions":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"71","severity":1,"message":"79","line":27,"column":6,"nodeType":"73","endLine":27,"endColumn":8,"suggestions":"80"},{"ruleId":"75","replacedBy":"81"},{"ruleId":"77","replacedBy":"82"},"Parsing error: Unexpected token\n\n  20 |     <div className='dashboard'>\n  21 |       <\n> 22 |       {/* <div className='dashboard-layers'>\n     |       ^\n  23 |         <NavBar activateModal={() => setModalDS(!modalDS)} />\n  24 |         <div className='dashboard-body'>\n  25 |           <Route exact path='/dashboard' component={Projects} />","no-unused-vars","'MdAdd' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["83"],"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"React Hook useEffect has a missing dependency: 'task.due_date'. Either include it or remove the dependency array.",["86"],["84"],["85"],{"desc":"87","fix":"88"},"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [id, token]",{"range":"91","text":"92"},"Update the dependencies array to be: [task.due_date]",{"range":"93","text":"94"},[1927,1929],"[id, token]",[944,946],"[task.due_date]"]