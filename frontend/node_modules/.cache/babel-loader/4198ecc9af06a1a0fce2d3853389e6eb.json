{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NewEvent.js\";\nimport React, { Component } from 'react'; // import {Button} from 'react-bootstrap'\n\nimport moment from 'moment';\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react';\nimport { DateInput, TimeInput, DateTimeInput, DatesRangeInput } from 'semantic-ui-calendar-react';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nlet eventsURL = 'http://localhost:3000/events/';\nlet eventsJSON = [];\nlet eventID = \"\";\nexport default class NewEvent extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleCalChange = (event, {\n      name,\n      value\n    }) => {\n      var dateString = value;\n      var dateMomentObject = moment(dateString, \"DD/MM/YYYY\");\n      var dateObject = dateMomentObject.format('MMM DD, YYYY');\n      this.setState({\n        date: dateObject.toString()\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const newEvent = {\n        name: this.state.name,\n        date: this.state.date,\n        location: this.state.location\n      };\n      fetch(\"http://localhost:3000/events\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Auth-Key': localStorage.getItem('auth_key')\n        },\n        body: JSON.stringify(newEvent)\n      }).then(res => res.json()).then(json => this.props.newEvent(json));\n      this.setState({\n        name: '',\n        date: '',\n        location: '',\n        event: ' '\n      });\n      this.props.handleClose; // .then(event=>{this.props.history.push('/dashboard')})\n      // this.fetchLastEvent()\n    };\n\n    this.state = {\n      name: '',\n      date: '',\n      location: '',\n      event: ' '\n    };\n  }\n\n  // fetchLastEvent() {\n  //     fetch(eventsURL, {\n  //         method:'GET',\n  //         headers:{\n  //             'Content-Type': 'application/json',\n  //             'Auth-Key': localStorage.getItem('auth_key')\n  //         }\n  //     })\n  //     .then(res => res.json())\n  //     .then(function(json){\n  //           eventsJSON = json;\n  //           eventID = eventsJSON[eventsJSON.length -1]\n  //           const newCollab={\n  //             event_id: eventID.id,\n  //             user_id: eventID.user_id\n  //         }\n  //         fetch(\"http://localhost:3000/collaborators\", {\n  //             method: \"POST\",\n  //             headers:{\n  //                 'Content-Type': 'application/json',\n  //                 'Auth-Key': localStorage.getItem('auth_key')\n  //             },\n  //             body: JSON.stringify(newCollab)\n  //         })\n  //             .then(res => res.json())\n  //         })      \n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          onChange: this.handleChange,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: this.state.name,\n            placeholder: \"Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          onChange: this.handleChange,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"location\",\n            value: this.state.location,\n            placeholder: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: /*#__PURE__*/_jsxDEV(DateInput, {\n            inline: true,\n            name: \"date\",\n            value: this.state.date,\n            onChange: this.handleCalChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          fluid: true,\n          type: \"submit\",\n          \"text-align\": \"center\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NewEvent.js"],"names":["React","Component","moment","Button","Form","Grid","Segment","DateInput","TimeInput","DateTimeInput","DatesRangeInput","SemanticDatepicker","eventsURL","eventsJSON","eventID","NewEvent","constructor","handleChange","e","name","value","target","setState","handleCalChange","event","dateString","dateMomentObject","dateObject","format","date","toString","handleSubmit","preventDefault","newEvent","state","location","fetch","method","headers","localStorage","getItem","body","JSON","stringify","then","res","json","props","handleClose","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,OAA7B,QAA2C,mBAA3C;AACA,SACIC,SADJ,EAEIC,SAFJ,EAGIC,aAHJ,EAIIC,eAJJ,QAKS,4BALT;AAOA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAO,sEAAP;AAGA,IAAIC,SAAS,GAAG,+BAAhB;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA,eAAe,MAAMC,QAAN,SAAuBd,SAAvB,CAAiC;AAC5Ce,EAAAA,WAAW,GAAE;AACT;;AADS,SAUbC,YAVa,GAUCC,CAAD,IAAM;AACf,YAAM;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAgBF,CAAC,CAACG,MAAxB;AACA,WAAKC,QAAL,CAAc;AACV,SAACH,IAAD,GAAQC;AADE,OAAd;AAGH,KAfY;;AAAA,SAiBbG,eAjBa,GAiBK,CAACC,KAAD,EAAQ;AAACL,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAR,KAA0B;AACxC,UAAIK,UAAU,GAAGL,KAAjB;AAEA,UAAIM,gBAAgB,GAAGxB,MAAM,CAACuB,UAAD,EAAa,YAAb,CAA7B;AACA,UAAIE,UAAU,GAAGD,gBAAgB,CAACE,MAAjB,CAAwB,cAAxB,CAAjB;AACA,WAAKN,QAAL,CAAc;AACVO,QAAAA,IAAI,EAAEF,UAAU,CAACG,QAAX;AADI,OAAd;AAGD,KAzBU;;AAAA,SA4BbC,YA5Ba,GA4BCb,CAAD,IAAK;AACdA,MAAAA,CAAC,CAACc,cAAF;AACA,YAAMC,QAAQ,GAAC;AACXd,QAAAA,IAAI,EAAE,KAAKe,KAAL,CAAWf,IADN;AAEXU,QAAAA,IAAI,EAAE,KAAKK,KAAL,CAAWL,IAFN;AAGXM,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC;AAHV,OAAf;AAKAC,MAAAA,KAAK,CAAC,8BAAD,EAAiC;AAClCC,QAAAA,MAAM,EAAE,MAD0B;AAElCC,QAAAA,OAAO,EAAC;AACJ,0BAAgB,kBADZ;AAEJ,sBAAYC,YAAY,CAACC,OAAb,CAAqB,UAArB;AAFR,SAF0B;AAMlCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,QAAf;AAN4B,OAAjC,CAAL,CAQCW,IARD,CAQMC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EARX,EASCF,IATD,CASME,IAAI,IAAE,KAAKC,KAAL,CAAWd,QAAX,CAAoBa,IAApB,CATZ;AAUA,WAAKxB,QAAL,CAAc;AACVH,QAAAA,IAAI,EAAE,EADI;AAEVU,QAAAA,IAAI,EAAE,EAFI;AAGVM,QAAAA,QAAQ,EAAE,EAHA;AAIVX,QAAAA,KAAK,EAAE;AAJG,OAAd;AAMA,WAAKuB,KAAL,CAAWC,WAAX,CAvBc,CAwBd;AACA;AACH,KAtDY;;AAET,SAAKd,KAAL,GAAa;AACTf,MAAAA,IAAI,EAAE,EADG;AAETU,MAAAA,IAAI,EAAE,EAFG;AAGTM,MAAAA,QAAQ,EAAE,EAHD;AAITX,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMH;;AAgDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAyB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BAEI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKlB,YAArB;AAAA,gCACQ,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,QAAQ,EAAE,KAAKd,YAA3B;AAAA,iCACA;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,MAAxB;AAA+B,YAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWf,IAAjD;AAAuD,YAAA,WAAW,EAAE;AAApE;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADR,eAIQ,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,QAAQ,EAAE,KAAKF,YAA3B;AAAA,iCACA;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC,UAAxB;AAAmC,YAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWC,QAArD;AAA+D,YAAA,WAAW,EAAE;AAA5E;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAJR,eAOQ,QAAC,IAAD,CAAM,KAAN;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,MAAM,MAAjB;AAAkB,YAAA,IAAI,EAAG,MAAzB;AAAgC,YAAA,KAAK,EAAE,KAAKD,KAAL,CAAWL,IAAlD;AAAwD,YAAA,QAAQ,EAAE,KAAKN;AAAvE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAPR,eAUQ,QAAC,MAAD;AAAQ,UAAA,KAAK,MAAb;AAAc,UAAA,IAAI,EAAC,QAAnB;AAA4B,wBAAW,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA4CH;;AAlI2C","sourcesContent":["import React, { Component } from 'react'\n// import {Button} from 'react-bootstrap'\nimport moment from 'moment';\nimport { Button, Form, Grid, Segment} from 'semantic-ui-react'\nimport {\n    DateInput,\n    TimeInput,\n    DateTimeInput,\n    DatesRangeInput\n  } from 'semantic-ui-calendar-react';\n\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\n \n\nlet eventsURL = 'http://localhost:3000/events/'\nlet eventsJSON = []\nlet eventID = \"\"\n\nexport default class NewEvent extends Component {\n    constructor(){\n        super()\n        this.state = {\n            name: '',\n            date: '',\n            location: '',\n            event: ' '\n        }\n    }\n\n    handleChange=(e)=> {\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleCalChange = (event, {name, value}) => {\n        var dateString = value;\n\n        var dateMomentObject = moment(dateString, \"DD/MM/YYYY\");\n        var dateObject = dateMomentObject.format('MMM DD, YYYY'); \n        this.setState({\n            date: dateObject.toString()\n        })\n      }\n\n\n    handleSubmit=(e)=>{\n        e.preventDefault()\n        const newEvent={\n            name: this.state.name,\n            date: this.state.date,\n            location: this.state.location\n        }\n        fetch(\"http://localhost:3000/events\", {\n            method: \"POST\",\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            },\n            body: JSON.stringify(newEvent)\n        })\n        .then(res=>res.json())\n        .then(json=>this.props.newEvent(json))\n        this.setState({\n            name: '',\n            date: '',\n            location: '',\n            event: ' '\n        })\n        this.props.handleClose\n        // .then(event=>{this.props.history.push('/dashboard')})\n        // this.fetchLastEvent()\n    }\n\n    // fetchLastEvent() {\n    //     fetch(eventsURL, {\n    //         method:'GET',\n    //         headers:{\n    //             'Content-Type': 'application/json',\n    //             'Auth-Key': localStorage.getItem('auth_key')\n    //         }\n    //     })\n    //     .then(res => res.json())\n    //     .then(function(json){\n    //           eventsJSON = json;\n    //           eventID = eventsJSON[eventsJSON.length -1]\n    //           const newCollab={\n    //             event_id: eventID.id,\n    //             user_id: eventID.user_id\n    //         }\n    //         fetch(\"http://localhost:3000/collaborators\", {\n    //             method: \"POST\",\n    //             headers:{\n    //                 'Content-Type': 'application/json',\n    //                 'Auth-Key': localStorage.getItem('auth_key')\n    //             },\n    //             body: JSON.stringify(newCollab)\n    //         })\n    //             .then(res => res.json())\n    //         })      \n    // }\n\n    render() {\n        return (\n            <div>\n\n                <Form onSubmit={this.handleSubmit}> \n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Event\" />\n                        </Form.Field>\n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" />\n                        </Form.Field>\n                        <Form.Field > \n                            <DateInput inline name = \"date\" value={this.state.date} onChange={this.handleCalChange} />\n                        </Form.Field>\n                        <Button fluid type=\"submit\" text-align=\"center\">Submit</Button>\n                    </Form>\n\n                {/* <Grid> \n                    <Grid.Column width ={9}> \n                    <Form size=\"huge\" onSubmit={this.handleSubmit}> \n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Event\" />\n                        </Form.Field>\n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" />\n                        </Form.Field>\n                        <Form.Field > \n                            <DateInput inline name = \"date\" value={this.state.date} onChange={this.handleCalChange} />\n                        </Form.Field>\n                        <Button  size=\"huge\" type=\"submit\" text-align=\"center\">Submit</Button>\n                    </Form>\n                    </Grid.Column>\n\n                    <Grid.Column width ={1}> \n                    </Grid.Column>\n                </Grid> */}\n\n            {/* <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Type of Event\" onChange={this.handleChange}/><br></br>        \n                <input type=\"text\" name=\"date\" value={this.state.date} placeholder= \"Date\" onChange={this.handleChange}/><br></br>\n                <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" onChange={this.handleChange}/><br></br>\n                <Button type=\"submit\" text-align=\"center\">Submit</Button>\n            </form>             */}\n        </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}