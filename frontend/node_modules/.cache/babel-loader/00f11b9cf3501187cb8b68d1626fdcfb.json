{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NewEvent.js\";\nimport React, { Component } from 'react'; // import {Button} from 'react-bootstrap'\n\nimport { Button, Form, Grid, Segment } from 'semantic-ui-react';\nimport { DateInput, TimeInput, DateTimeInput, DatesRangeInput } from 'semantic-ui-calendar-react';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nlet eventsURL = 'http://localhost:3000/events/';\nlet eventsJSON = [];\nlet eventID = \"\";\nexport default class NewEvent extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleCalChange = (event, {\n      name,\n      value\n    }) => {\n      if (this.state.hasOwnProperty(name)) {\n        this.setState({\n          date: value\n        });\n      }\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const newEvent = {\n        name: this.state.name,\n        date: this.state.date,\n        location: this.state.location\n      };\n      fetch(\"http://localhost:3000/events\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Auth-Key': localStorage.getItem('auth_key')\n        },\n        body: JSON.stringify(newEvent)\n      }).then(res => res.json()).then(json => this.props.newEvent(json)); // .then(event=>{this.props.history.push('/dashboard')})\n      // this.fetchLastEvent()\n    };\n\n    this.state = {\n      name: '',\n      date: '',\n      location: '',\n      event: ' '\n    };\n  }\n\n  // fetchLastEvent() {\n  //     fetch(eventsURL, {\n  //         method:'GET',\n  //         headers:{\n  //             'Content-Type': 'application/json',\n  //             'Auth-Key': localStorage.getItem('auth_key')\n  //         }\n  //     })\n  //     .then(res => res.json())\n  //     .then(function(json){\n  //           eventsJSON = json;\n  //           eventID = eventsJSON[eventsJSON.length -1]\n  //           const newCollab={\n  //             event_id: eventID.id,\n  //             user_id: eventID.user_id\n  //         }\n  //         fetch(\"http://localhost:3000/collaborators\", {\n  //             method: \"POST\",\n  //             headers:{\n  //                 'Content-Type': 'application/json',\n  //                 'Auth-Key': localStorage.getItem('auth_key')\n  //             },\n  //             body: JSON.stringify(newCollab)\n  //         })\n  //             .then(res => res.json())\n  //         })      \n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 9,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            size: \"huge\",\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n              onChange: this.handleChange,\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                value: this.state.name,\n                placeholder: \"What are we celebrating\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              onChange: this.handleChange,\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"location\",\n                value: this.state.location,\n                placeholder: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              children: /*#__PURE__*/_jsxDEV(DateInput, {\n                inline: true,\n                name: \"date\",\n                value: this.state.date,\n                onChange: this.handleCalChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"huge\",\n              type: \"submit\",\n              \"text-align\": \"center\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NewEvent.js"],"names":["React","Component","Button","Form","Grid","Segment","DateInput","TimeInput","DateTimeInput","DatesRangeInput","SemanticDatepicker","eventsURL","eventsJSON","eventID","NewEvent","constructor","handleChange","e","name","value","target","setState","handleCalChange","event","state","hasOwnProperty","date","handleSubmit","preventDefault","newEvent","location","fetch","method","headers","localStorage","getItem","body","JSON","stringify","then","res","json","props","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,OAA7B,QAA2C,mBAA3C;AACA,SACIC,SADJ,EAEIC,SAFJ,EAGIC,aAHJ,EAIIC,eAJJ,QAKS,4BALT;AAOA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAO,sEAAP;AAGA,IAAIC,SAAS,GAAG,+BAAhB;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA,eAAe,MAAMC,QAAN,SAAuBb,SAAvB,CAAiC;AAC5Cc,EAAAA,WAAW,GAAE;AACT;;AADS,SAUbC,YAVa,GAUCC,CAAD,IAAM;AACf,YAAM;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAgBF,CAAC,CAACG,MAAxB;AACA,WAAKC,QAAL,CAAc;AACV,SAACH,IAAD,GAAQC;AADE,OAAd;AAGH,KAfY;;AAAA,SAiBbG,eAjBa,GAiBK,CAACC,KAAD,EAAQ;AAACL,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAR,KAA0B;AACxC,UAAI,KAAKK,KAAL,CAAWC,cAAX,CAA0BP,IAA1B,CAAJ,EAAqC;AACnC,aAAKG,QAAL,CAAc;AAAEK,UAAAA,IAAI,EAAEP;AAAR,SAAd;AACD;AACF,KArBU;;AAAA,SAwBbQ,YAxBa,GAwBCV,CAAD,IAAK;AACdA,MAAAA,CAAC,CAACW,cAAF;AACA,YAAMC,QAAQ,GAAC;AACXX,QAAAA,IAAI,EAAE,KAAKM,KAAL,CAAWN,IADN;AAEXQ,QAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE,IAFN;AAGXI,QAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWM;AAHV,OAAf;AAKAC,MAAAA,KAAK,CAAC,8BAAD,EAAiC;AAClCC,QAAAA,MAAM,EAAE,MAD0B;AAElCC,QAAAA,OAAO,EAAC;AACJ,0BAAgB,kBADZ;AAEJ,sBAAYC,YAAY,CAACC,OAAb,CAAqB,UAArB;AAFR,SAF0B;AAMlCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,QAAf;AAN4B,OAAjC,CAAL,CAQCU,IARD,CAQMC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EARX,EASCF,IATD,CASME,IAAI,IAAE,KAAKC,KAAL,CAAWb,QAAX,CAAoBY,IAApB,CATZ,EAPc,CAiBd;AACA;AACH,KA3CY;;AAET,SAAKjB,KAAL,GAAa;AACTN,MAAAA,IAAI,EAAE,EADG;AAETQ,MAAAA,IAAI,EAAE,EAFG;AAGTI,MAAAA,QAAQ,EAAE,EAHD;AAITP,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMH;;AAqCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAoB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BAEI,QAAC,IAAD;AAAA,gCACI,QAAC,IAAD,CAAM,MAAN;AAAa,UAAA,KAAK,EAAG,CAArB;AAAA,iCACA,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC,MAAX;AAAkB,YAAA,QAAQ,EAAE,KAAKhB,YAAjC;AAAA,oCACI,QAAC,IAAD,CAAM,KAAN;AAAY,cAAA,QAAQ,EAAE,KAAKX,YAA3B;AAAA,qCACA;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,IAAI,EAAC,MAAxB;AAA+B,gBAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWN,IAAjD;AAAuD,gBAAA,WAAW,EAAE;AAApE;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII,QAAC,IAAD,CAAM,KAAN;AAAY,cAAA,QAAQ,EAAE,KAAKF,YAA3B;AAAA,qCACA;AAAO,gBAAA,IAAI,EAAC,MAAZ;AAAmB,gBAAA,IAAI,EAAC,UAAxB;AAAmC,gBAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWM,QAArD;AAA+D,gBAAA,WAAW,EAAE;AAA5E;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAOI,QAAC,IAAD,CAAM,KAAN;AAAA,qCACI,QAAC,SAAD;AAAW,gBAAA,MAAM,MAAjB;AAAkB,gBAAA,IAAI,EAAG,MAAzB;AAAgC,gBAAA,KAAK,EAAE,KAAKN,KAAL,CAAWE,IAAlD;AAAwD,gBAAA,QAAQ,EAAE,KAAKJ;AAAvE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAPJ,eAUI,QAAC,MAAD;AAAS,cAAA,IAAI,EAAC,MAAd;AAAqB,cAAA,IAAI,EAAC,QAA1B;AAAmC,4BAAW,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAgBI,QAAC,IAAD,CAAM,MAAN;AAAa,UAAA,KAAK,EAAG;AAArB;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA+BH;;AA1G2C","sourcesContent":["import React, { Component } from 'react'\n// import {Button} from 'react-bootstrap'\nimport { Button, Form, Grid, Segment} from 'semantic-ui-react'\nimport {\n    DateInput,\n    TimeInput,\n    DateTimeInput,\n    DatesRangeInput\n  } from 'semantic-ui-calendar-react';\n\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\n \n\nlet eventsURL = 'http://localhost:3000/events/'\nlet eventsJSON = []\nlet eventID = \"\"\n\nexport default class NewEvent extends Component {\n    constructor(){\n        super()\n        this.state = {\n            name: '',\n            date: '',\n            location: '',\n            event: ' '\n        }\n    }\n\n    handleChange=(e)=> {\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleCalChange = (event, {name, value}) => {\n        if (this.state.hasOwnProperty(name)) {\n          this.setState({ date: value });\n        }\n      }\n\n\n    handleSubmit=(e)=>{\n        e.preventDefault()\n        const newEvent={\n            name: this.state.name,\n            date: this.state.date,\n            location: this.state.location\n        }\n        fetch(\"http://localhost:3000/events\", {\n            method: \"POST\",\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            },\n            body: JSON.stringify(newEvent)\n        })\n        .then(res=>res.json())\n        .then(json=>this.props.newEvent(json))\n        // .then(event=>{this.props.history.push('/dashboard')})\n        // this.fetchLastEvent()\n    }\n\n    // fetchLastEvent() {\n    //     fetch(eventsURL, {\n    //         method:'GET',\n    //         headers:{\n    //             'Content-Type': 'application/json',\n    //             'Auth-Key': localStorage.getItem('auth_key')\n    //         }\n    //     })\n    //     .then(res => res.json())\n    //     .then(function(json){\n    //           eventsJSON = json;\n    //           eventID = eventsJSON[eventsJSON.length -1]\n    //           const newCollab={\n    //             event_id: eventID.id,\n    //             user_id: eventID.user_id\n    //         }\n    //         fetch(\"http://localhost:3000/collaborators\", {\n    //             method: \"POST\",\n    //             headers:{\n    //                 'Content-Type': 'application/json',\n    //                 'Auth-Key': localStorage.getItem('auth_key')\n    //             },\n    //             body: JSON.stringify(newCollab)\n    //         })\n    //             .then(res => res.json())\n    //         })      \n    // }\n\n    render() {\n        return (\n            <div>\n\n                <Grid> \n                    <Grid.Column width ={9}> \n                    <Form size=\"huge\" onSubmit={this.handleSubmit}> \n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"What are we celebrating\" />\n                        </Form.Field>\n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" />\n                        </Form.Field>\n                        <Form.Field > \n                            <DateInput inline name = \"date\" value={this.state.date} onChange={this.handleCalChange} />\n                        </Form.Field>\n                        <Button  size=\"huge\" type=\"submit\" text-align=\"center\">Submit</Button>\n                    </Form>\n                    </Grid.Column>\n\n                    <Grid.Column width ={1}> \n                    </Grid.Column>\n                </Grid>\n\n            {/* <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Type of Event\" onChange={this.handleChange}/><br></br>        \n                <input type=\"text\" name=\"date\" value={this.state.date} placeholder= \"Date\" onChange={this.handleChange}/><br></br>\n                <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" onChange={this.handleChange}/><br></br>\n                <Button type=\"submit\" text-align=\"center\">Submit</Button>\n            </form>             */}\n        </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}