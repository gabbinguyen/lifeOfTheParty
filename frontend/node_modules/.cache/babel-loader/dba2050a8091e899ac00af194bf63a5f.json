{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \"/* add css styles here (optional) */\\n\\n@import url('https://fonts.googleapis.com/css?family=Nunito:600,700&display=swap');\\n\\n.styles_loginContainer__1OP_F \\t\\t{ \\n  font-family: Nunito, Roboto, Arial, sans-serif;\\n\\n/* \\n  margin:30px auto 0; \\n  display:block; \\n  background:gold; */\\n\\n\\n  /* width: 300px; */\\n  /* border: 15px solid green; */\\n  /* padding: 50px;\\n  margin: 20px; */\\n  \\n\\n  /* background: blue;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  margin-top: -50px;\\n  margin-left: -50px;\\n  width: 100px;\\n  height: 100px; */\\n\\n\\n\\n\\n  \\n  width: 300px;\\n\\tmargin: 4em auto;\\n\\tpadding: 3em 2em 2em 2em;\\n\\tbackground: #fafafa;\\n\\tborder: 1px solid #ebebeb;\\n\\tbox-shadow: rgba(0,0,0,0.14902) 0px 1px 1px 0px,rgba(0,0,0,0.09804) 0px 1px 2px 0px;\\n  \\n \\n}\\n\\n.styles_loginGroup__3GiQp {\\n  position:relative; \\n  margin-bottom:45px;\\n  /* padding-left: 40px; */\\n}\\n\\ninput \\t\\t\\t\\t{\\n  /* font-size:18px;\\n  padding:15px 10px 10px 15px;\\n  display:block;\\n  width: 80%;\\n  border:none;\\n  border-bottom:1px solid #757575; */\\n\\n\\n  font-size: 18px;\\n  font-family: Nunito, Roboto, Arial, sans-serif;\\n\\tpadding: 10px 10px 10px 5px;\\n\\t-webkit-appearance: none;\\n\\tdisplay: block;\\n\\tbackground: #fafafa;\\n\\tcolor: #394679;\\n\\twidth: 95%;\\n\\tborder: none;\\n\\tborder-radius: 0;\\n\\tborder-bottom: 1px solid #757575;\\n}\\ninput:focus \\t\\t{ outline:none; }\\n\\nlabel \\t\\t\\t\\t {\\n  color:#999; \\n  font-size:18px;\\n  font-weight:normal;\\n  position:absolute;\\n  pointer-events:none;\\n  left:5px;\\n  top:10px;\\n  transition:0.2s ease all; \\n  -moz-transition:0.2s ease all; \\n  -webkit-transition:0.2s ease all;\\n}\\n\\n/* active state  */\\ninput:focus ~ label, input:valid ~ label \\t\\t{\\n  top:-20px;\\n  font-size:14px;\\n  color:#5264AE;\\n} \\n\";\nvar styles = {\n  \"loginContainer\": \"styles_loginContainer__1OP_F\",\n  \"loginGroup\": \"styles_loginGroup__3GiQp\"\n};\nstyleInject(css);\n/**\n* Returns the email validation error\n* @param  {String}  email   user email\n* @return {String}          email error\n*/\n\nvar emailValidator = function emailValidator(email) {\n  var error = null;\n\n  if (!email || email.length === 0) {\n    error = '';\n  } else if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n    error = 'Invalid email address';\n  }\n\n  return error;\n};\n/**\n * Returns the password validation error\n * @param  {String}  password   user password\n * @return {String}             password error\n */\n\n\nvar passwordValidator = function passwordValidator() {\n  var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var passwordError = null;\n  var regEx = RegExp(\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\");\n\n  if (!password || password.length === 0) {\n    passwordError = '';\n  } else if (password.length < 8) {\n    passwordError = 'Password must contain atleast 8 characters';\n  } else if (regEx.test(password)) {\n    passwordError = \"Passowrd must contains one letter and one number\";\n  }\n\n  return passwordError;\n};\n/**\n * Returns the confirm password validation error\n * @param  {String}  confirmPassword   user confirm password\n * @return {String}             confirm password  error\n */\n\n\nvar confirmPasswordValidator = function confirmPasswordValidator() {\n  var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var confirmPassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var confirmPasswordError = null;\n\n  if (confirmPassword.length && password.length) {\n    if (password !== confirmPassword) {\n      confirmPasswordError = 'Confirm password does not match';\n    }\n  } else if (!password) {\n    confirmPasswordError = 'No password to match';\n  }\n\n  return confirmPasswordError;\n};\n/**\n * Returns the login password validation error\n * @param  {String}  loginPassword   user login password\n * @return {String}                  login password error\n */\n\n\nvar loginPasswordValidator = function loginPasswordValidator(password) {\n  var passwordError = '';\n\n  if (!password || password.length === 0) {\n    passwordError = 'Password is required';\n  }\n\n  return passwordError;\n};\n/**\n * Returns the edit name validation error\n * @param  {String}  name   user edit name\n * @return {String}         edit name error\n */\n\n\nvar nameValidator = function nameValidator(name) {\n  var error = null;\n\n  if (!name || name.length === 0) {\n    error = 'Name is required';\n  } else if (name && !/^[a-zA-Z]*$/.test(name)) {\n    error = 'Invalid name';\n  } else if (!/[A-Z].*/.test(name)) {\n    error = 'Must starts with capital case';\n  } else if (name.split(\" \").length > 1) {\n    error = 'Invalid name';\n  } else if (name.length < 3) {\n    error = 'Username must contain atleast 3 characters';\n  }\n\n  return error;\n};\n\nvar loginUsernameValidator = function loginUsernameValidator(username) {\n  var usernameError = '';\n\n  if (!username || username.length === 0) {\n    usernameError = 'Username is required,';\n  }\n\n  return usernameError;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}; //need to fix the rewriting the button styles\n\n/**\n* Represents the the login sign up functionalities\n*/\n\n\nvar Home = function (_Component) {\n  inherits(Home, _Component);\n  /**\n  * Class constructor\n  * @param {Object} props\n  */\n\n  function Home(props) {\n    classCallCheck(this, Home);\n\n    var _this = possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));\n\n    _this.handleLogin = function () {\n      var _this$state = _this.state,\n          loginUsername = _this$state.loginUsername,\n          loginPassword = _this$state.loginPassword;\n\n      _this.props.handleLogin(loginUsername, loginPassword);\n    };\n\n    _this.handleSignUp = function () {\n      var _this$state2 = _this.state,\n          signUpUsername = _this$state2.signUpUsername,\n          signUpEmail = _this$state2.signUpEmail,\n          signUpPassword = _this$state2.signUpPassword;\n\n      _this.props.handleSignup(signUpUsername, signUpEmail, signUpPassword);\n    };\n\n    _this.navigateSignup = function () {\n      var error = _this.state.error;\n      error.usernameMessage = \"\";\n      error.passwordMessage = \"\";\n\n      _this.setState({\n        navigatePage: true,\n        error: error\n      });\n    };\n\n    _this.handleLoginUsername = function (event) {\n      var username = \"\" + event.target.value;\n      var error = _this.state.error;\n      error.usernameMessage = loginUsernameValidator(username);\n\n      _this.setState({\n        error: error,\n        loginUsername: username\n      });\n    };\n\n    _this.handleLoginPassword = function (event) {\n      var password = \"\" + event.target.value;\n      var error = _this.state.error;\n      error.passwordMessage = loginPasswordValidator(password);\n\n      _this.setState({\n        error: error,\n        loginPassword: password\n      });\n    };\n\n    _this.handleButtonHoverEnter = function () {\n      var propStyles = _extends({}, _this.state.propStyles, {\n        background: _this.props.buttonHoverColor\n      });\n\n      _this.setState({\n        propStyles: propStyles\n      });\n    };\n\n    _this.handleButtonHoverLeave = function () {\n      var propStyles = _extends({}, _this.state.propStyles, {\n        background: _this.props.buttonColor\n      });\n\n      _this.setState({\n        propStyles: propStyles\n      });\n    };\n\n    _this.handleSignUpHoverEnter = function () {\n      var signUpStyles = _extends({}, _this.state.signUpStyles, {\n        color: _this.props.buttonHoverColor\n      });\n\n      _this.setState({\n        signUpStyles: signUpStyles\n      });\n    };\n\n    _this.handleSignUpHoverLeave = function () {\n      var signUpStyles = _extends({}, _this.state.signUpStyles, {\n        color: _this.props.buttonColor\n      });\n\n      _this.setState({\n        signUpStyles: signUpStyles\n      });\n    };\n\n    _this.handleSignupUsername = function (event) {\n      var username = \"\" + event.target.value;\n      var error = _this.state.error;\n      error.usernameMessage = loginUsernameValidator(username);\n      error.usernameMessage = nameValidator(username);\n\n      _this.setState({\n        error: error,\n        signUpUsername: username\n      });\n    };\n\n    _this.handleSignupPassword = function (event) {\n      var password = \"\" + event.target.value;\n      var error = _this.state.error;\n      var confirmPassword = _this.state.signUpConfirmPassword;\n      error.passwordMessage = loginPasswordValidator(password);\n      error.passwordMessage = passwordValidator(password);\n      error.confirmPasswordMessage = confirmPasswordValidator(password, confirmPassword);\n\n      _this.setState({\n        error: error,\n        signUpPassword: password\n      });\n    };\n\n    _this.handleSignupEmail = function (event) {\n      var email = \"\" + event.target.value;\n      var error = _this.state.error; //   error.emailMessage = (password);\n\n      error.emailMessage = emailValidator(email);\n\n      _this.setState({\n        error: error,\n        signUpEmail: email\n      });\n    };\n\n    _this.handleSignupConfirmPassword = function (event) {\n      var confirmPassword = \"\" + event.target.value;\n      var error = _this.state.error;\n      var password = _this.state.signUpPassword;\n      error.confirmPasswordMessage = confirmPasswordValidator(password, confirmPassword);\n\n      _this.setState({\n        error: error,\n        signUpConfirmPassword: confirmPassword\n      });\n    };\n\n    _this.state = {\n      propStyles: {\n        background: _this.props.buttonColor,\n        borderRadius: 3,\n        border: 0,\n        color: \"white\",\n        height: 48,\n        width: 300,\n        padding: \"0 30px\",\n        fontSize: \"18px\",\n        fontFamily: _this.props.fontFamily\n      },\n      font: {\n        fontFamily: _this.props.fontFamily\n      },\n      error: {\n        open: _this.props.errorEnable,\n        usernameMessage: \"\",\n        passwordMessage: \"\",\n        confirmPasswordMessage: \"\",\n        emailMessage: \"\",\n        message: _this.props.errorMessage\n      },\n      disabledButton: {\n        background: _this.props.disabledButtonColor,\n        borderRadius: 3,\n        border: 0,\n        color: \"white\",\n        height: 48,\n        width: 300,\n        padding: \"0 30px\",\n        fontSize: \"18px\",\n        fontFamily: _this.props.fontFamily\n      },\n      navigatePage: false,\n      signUpStyles: {\n        color: _this.props.buttonColor\n      },\n      errorMessageStyles: {\n        margin: \"auto\",\n        width: \"100%\",\n        paddingBottom: \"30px\",\n        color: \"#FF0000\",\n        font: _this.props.fontFamily\n      },\n      signUpPassword: \"\",\n      signUpUsername: \"\",\n      signUpConfirmPassword: \"\",\n      signUpEmail: \"\",\n      loginUsername: \"\",\n      loginPassword: \"\"\n    };\n    return _this;\n  }\n  /**\n   * Handle login page navigation using props\n   */\n\n  /**\n   * Hanlde sign up page navigation using props\n   */\n\n  /**\n   * Handle rendering sign up content\n   */\n\n  /**\n   * Handle setting login usernmae state\n   * @param  {String} event Changer event of the login username\n   */\n\n  /**\n   * Handle setting login password state\n   * @param  {String} event Changer event of the login password\n   */\n\n  /**\n   * Handle button hover event for mouse enter\n   */\n\n  /**\n   * Handle button hover event for mouse leave\n   */\n\n  /**\n   * Handle sign up button hover for mouse enter\n   */\n\n  /**\n   * Handle sign up button hover for mouse leave\n   */\n\n  /**\n  * Handle setting signup username state\n  * @param  {String} event Changer event of the signup username\n  */\n\n  /**\n   * Handle setting signup password state\n   * @param  {String} event Changer event of the signup password\n   */\n\n  /**\n   * Handle setting signup email state\n   * @param  {String} event Changer event of the signup email\n   */\n\n  /**\n   * Handle setting signup confirm password state\n   * @param  {String} event Changer event of the signup confirm password\n   */\n\n\n  createClass(Home, [{\n    key: \"render\",\n\n    /**\n    * Describes the elements on the login and sign up\n    * @return {String} HTML elements\n    */\n    value: function render() {\n      var _state = this.state,\n          propStyles = _state.propStyles,\n          font = _state.font,\n          error = _state.error,\n          disabledButton = _state.disabledButton,\n          navigatePage = _state.navigatePage,\n          signUpStyles = _state.signUpStyles,\n          signUpPassword = _state.signUpPassword,\n          signUpConfirmPassword = _state.signUpConfirmPassword,\n          signUpEmail = _state.signUpEmail,\n          signUpUsername = _state.signUpUsername,\n          loginUsername = _state.loginUsername,\n          loginPassword = _state.loginPassword,\n          errorMessageStyles = _state.errorMessageStyles;\n      var loginButton = null;\n      var errorText = null;\n      var mainContent = null;\n      var errorList = null;\n      var signupButton = null;\n      var _ref = \"\",\n          usernameError = _ref.usernameError,\n          passwordError = _ref.passwordError,\n          emailError = _ref.emailError,\n          confirmPasswordError = _ref.confirmPasswordError;\n\n      if (error.usernameMessage || error.passwordMessage || error.emailMessage) {\n        errorText = error.usernameMessage + \" \" + error.passwordMessage + \" \" + error.emailMessage;\n      } else if (error.open) {\n        errorText = error.message;\n      }\n\n      if (navigatePage) {\n        usernameError = error.usernameMessage;\n        passwordError = error.passwordMessage;\n        emailError = error.emailMessage;\n        confirmPasswordError = error.confirmPasswordMessage;\n        errorList = React.createElement(\"div\", {\n          style: errorMessageStyles\n        }, React.createElement(\"div\", {\n          style: font\n        }, React.createElement(\"div\", null, usernameError), React.createElement(\"div\", null, passwordError), React.createElement(\"div\", null, emailError), React.createElement(\"div\", null, confirmPasswordError)));\n      }\n\n      var enebledSignUpButton = React.createElement(\"button\", {\n        type: \"button\",\n        style: propStyles,\n        onClick: this.handleSignUp,\n        onMouseEnter: this.handleButtonHoverEnter,\n        onMouseLeave: this.handleButtonHoverLeave\n      }, \"Sign up\");\n      var disbaleSignupButton = React.createElement(\"button\", {\n        type: \"button\",\n        style: disabledButton,\n        disabled: true\n      }, \"Sign up\");\n      var errorMessage = React.createElement(\"div\", {\n        style: errorMessageStyles\n      }, React.createElement(\"div\", {\n        style: font\n      }, errorText));\n\n      if (!signUpPassword.length || !signUpConfirmPassword || !signUpEmail || !signUpUsername) {\n        signupButton = disbaleSignupButton;\n      } else if (error.confirmPasswordMessage || error.emailMessage || error.passwordMessage || error.usernameMessage) {\n        signupButton = disbaleSignupButton;\n      } else {\n        signupButton = enebledSignUpButton;\n      }\n\n      var enebledLoginButton = React.createElement(\"button\", {\n        type: \"button\",\n        style: propStyles,\n        onClick: this.handleLogin,\n        onMouseEnter: this.handleButtonHoverEnter,\n        onMouseLeave: this.handleButtonHoverLeave\n      }, \"Login\");\n      var disbaleLoginButton = React.createElement(\"button\", {\n        type: \"button\",\n        style: disabledButton,\n        disabled: true\n      }, \"Login\");\n\n      if (!loginUsername || !loginPassword) {\n        loginButton = disbaleLoginButton;\n      } else if (error.confirmPasswordMessage || error.emailMessage) {\n        loginButton = disbaleLoginButton;\n      } else if (error.open) {\n        loginButton = disbaleLoginButton;\n      } else {\n        loginButton = enebledLoginButton;\n      }\n\n      var login = React.createElement(\"div\", {\n        className: styles.loginContainer\n      }, errorMessage, React.createElement(\"div\", {\n        className: styles.loginGroup\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        style: font,\n        onChange: this.handleLoginUsername\n      }), React.createElement(\"label\", {\n        style: font\n      }, \"Username\")), React.createElement(\"div\", {\n        className: styles.loginGroup\n      }, React.createElement(\"input\", {\n        style: font,\n        required: true,\n        type: \"password\",\n        onChange: this.handleLoginPassword\n      }), React.createElement(\"label\", {\n        style: font\n      }, \"Password\")), React.createElement(\"div\", {\n        style: font\n      }, loginButton, React.createElement(\"div\", {\n        style: signUpContentStyles,\n        onClick: this.navigateSignup,\n        onMouseEnter: this.handleSignUpHoverEnter,\n        onMouseLeave: this.handleSignUpHoverLeave\n      }, \"Don't have an account? \", React.createElement(\"b\", {\n        style: signUpStyles\n      }, \"Sign Up\"))));\n      var signUp = React.createElement(\"div\", null, React.createElement(\"div\", {\n        className: styles.loginContainer\n      }, errorList, React.createElement(\"div\", {\n        className: styles.loginGroup\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        style: font,\n        onChange: this.handleSignupUsername\n      }), React.createElement(\"label\", {\n        style: font\n      }, \"Username\")), React.createElement(\"div\", {\n        className: styles.loginGroup\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        required: true,\n        style: font,\n        onChange: this.handleSignupEmail\n      }), React.createElement(\"label\", {\n        style: font\n      }, \"Email\")), React.createElement(\"div\", {\n        className: styles.loginGroup\n      }, React.createElement(\"input\", {\n        required: true,\n        style: font,\n        type: \"password\",\n        onChange: this.handleSignupPassword\n      }), React.createElement(\"label\", {\n        style: font\n      }, \"Password\")), React.createElement(\"div\", {\n        className: styles.loginGroup\n      }, React.createElement(\"input\", {\n        type: \"password\",\n        required: true,\n        style: font,\n        onChange: this.handleSignupConfirmPassword\n      }), React.createElement(\"label\", {\n        style: font\n      }, \"Confirm Password\")), React.createElement(\"div\", {\n        style: font\n      }, signupButton)));\n      navigatePage === false ? mainContent = login : mainContent = signUp;\n      return React.createElement(\"div\", null, mainContent);\n    }\n  }]);\n  return Home;\n}(Component);\n\nHome.propTypes = {\n  buttonColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  disabledButtonColor: PropTypes.string,\n  buttonHoverColor: PropTypes.string,\n  errorMessage: PropTypes.string,\n  handleSignup: PropTypes.func,\n  handleLogin: PropTypes.func,\n  errorEnable: PropTypes.bool\n};\nHome.defaultProps = {\n  buttonColor: \"#5264AE\",\n  buttonHoverColor: \"#6373b6\",\n  disabledButtonColor: \"#a8b1d6\",\n  fontFamily: \"Nunito, Roboto, Arial, sans-serif\",\n  errorMessage: \"Username or password is incorrect❓\",\n  handleLogin: function handleLogin() {\n    return console.log('handle login');\n  },\n  handleSignup: function handleSignup() {\n    return console.log('handle signup');\n  },\n  errorEnable: false\n};\nvar signUpContentStyles = {\n  margin: \"auto\",\n  width: \"80%\",\n  paddingTop: \"40px\"\n};\n\nvar LoginModal = function (_Component) {\n  inherits(LoginModal, _Component);\n\n  function LoginModal(props) {\n    classCallCheck(this, LoginModal);\n\n    var _this = possibleConstructorReturn(this, (LoginModal.__proto__ || Object.getPrototypeOf(LoginModal)).call(this, props));\n\n    _this.state = {\n      navigatePage: _this.props.navigatePage\n    };\n    return _this;\n  }\n\n  createClass(LoginModal, [{\n    key: 'render',\n    value: function render() {\n      return (// needs to pass the propes, currently use defalt props\n        React.createElement('div', null, React.createElement(Home, {\n          handleSignup: this.props.handleSignup,\n          handleLogin: this.props.handleLogin,\n          buttonColor: this.props.buttonColor,\n          disabledButtonColor: this.props.disabledButtonColor,\n          buttonHoverColor: this.props.buttonHoverColor,\n          fontFamily: this.props.fontFamily,\n          errorMessage: this.props.errorMessage,\n          errorEnable: this.props.errorEnable\n        }))\n      );\n    }\n  }]);\n  return LoginModal;\n}(Component);\n\nLoginModal.propTypes = {\n  buttonColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  disabledButtonColor: PropTypes.string,\n  buttonHoverColor: PropTypes.string,\n  errorMessage: PropTypes.string,\n  handleSignup: PropTypes.func,\n  handleLogin: PropTypes.func,\n  errorEnable: PropTypes.bool\n};\nLoginModal.defaultProps = {\n  buttonColor: \"#5264AE\",\n  buttonHoverColor: \"#6373b6\",\n  disabledButtonColor: \"#a8b1d6\",\n  fontFamily: \"Nunito, Roboto, Arial, sans-serif\",\n  errorMessage: \"Username or password is incorrect❓\",\n  handleLogin: function handleLogin() {\n    return console.log('handle login');\n  },\n  handleSignup: function handleSignup() {\n    return console.log('handle signup');\n  },\n  errorEnable: false\n};\nexport default LoginModal;","map":{"version":3,"sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utilities/validator.js","../src/components/Home.js","../src/index.js"],"names":["emailValidator","error","email","passwordValidator","password","passwordError","regEx","RegExp","confirmPasswordValidator","confirmPassword","confirmPasswordError","loginPasswordValidator","nameValidator","name","loginUsernameValidator","usernameError","username","Home","Component","fontFamily","errorMessage","buttonColor","loginUsername","loginPassword","signUpUsername","signUpEmail","signUpPassword","event","propStyles","buttonHoverColor","signUpStyles","font","disabledButton","navigatePage","signUpConfirmPassword","errorMessageStyles","loginButton","errorText","mainContent","errorList","signupButton","emailError","enebledSignUpButton","handleButtonHoverLeave","disbaleSignupButton","enebledLoginButton","disbaleLoginButton","login","styles","handleLoginUsername","handleLoginPassword","handleSignUpHoverLeave","signUp","handleSignupUsername","handleSignupEmail","handleSignupPassword","handleSignupConfirmPassword","PropTypes","bool","console","signUpContentStyles","LoginModal","errorEnable"],"mappings":"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","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","\n/**\n* Returns the email validation error\n* @param  {String}  email   user email\n* @return {String}          email error\n*/\nconst emailValidator = (email) => {\n    let error = null;\n\n    if (!email || email.length === 0) {\n        error = '';\n    } else if (email && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n        error = 'Invalid email address';\n    }\n    return error;\n};\n\n/**\n * Returns the password validation error\n * @param  {String}  password   user password\n * @return {String}             password error\n */\nconst passwordValidator = (password = '') => {\n    let passwordError = null;\n    const regEx = RegExp(\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\")\n\n    if (!password || password.length === 0) {\n        passwordError = '';\n    } else if (password.length < 8) {\n        passwordError = 'Password must contain atleast 8 characters';\n    } else if (regEx.test(password)) {\n        passwordError = \"Passowrd must contains one letter and one number\"\n    }\n    return passwordError;\n}\n\n\n/**\n * Returns the confirm password validation error\n * @param  {String}  confirmPassword   user confirm password\n * @return {String}             confirm password  error\n */\nconst confirmPasswordValidator = (password = '', confirmPassword = '') => {\n    let confirmPasswordError = null;\n\n    if (confirmPassword.length && password.length) {\n        if (password !== confirmPassword) {\n            confirmPasswordError = 'Confirm password does not match';\n        }\n    } else if (!password) {\n        confirmPasswordError = 'No password to match';\n    }\n\n    return confirmPasswordError;\n}\n\n/**\n * Returns the login password validation error\n * @param  {String}  loginPassword   user login password\n * @return {String}                  login password error\n */\nconst loginPasswordValidator = (password) => {\n    let passwordError = '';\n\n    if (!password || password.length === 0) {\n        passwordError = 'Password is required';\n    }\n    return passwordError;\n}\n\n/**\n * Returns the edit name validation error\n * @param  {String}  name   user edit name\n * @return {String}         edit name error\n */\nconst nameValidator = (name) => {\n    let error = null\n    if (!name || name.length === 0) {\n        error = 'Name is required';\n    } else if (name && !/^[a-zA-Z]*$/.test(name)) {\n        error = 'Invalid name';\n    } else if (!/[A-Z].*/.test(name)) {\n        error = 'Must starts with capital case';\n    } else if (name.split(\" \").length > 1) {\n        error = 'Invalid name';\n    } else if (name.length < 3) {\n        error = 'Username must contain atleast 3 characters'\n    }\n    return error\n}\n\nconst loginUsernameValidator = (username) => {\n    let usernameError = ''\n\n    if (!username || username.length === 0) {\n        usernameError = 'Username is required,'\n    }\n\n    return usernameError;\n}\n\nexport { emailValidator, passwordValidator, confirmPasswordValidator, loginPasswordValidator, nameValidator, loginUsernameValidator };","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./styles.css\";\n\nimport {\n  loginUsernameValidator,\n  loginPasswordValidator,\n  nameValidator,\n  emailValidator,\n  passwordValidator,\n  confirmPasswordValidator\n} from \"../utilities/validator\";\n\n//need to fix the rewriting the button styles\n\n/**\n* Represents the the login sign up functionalities\n*/\nclass Home extends Component {\n\n  /**\n  * Class constructor\n  * @param {Object} props\n  */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      propStyles: {\n        background: this.props.buttonColor,\n        borderRadius: 3,\n        border: 0,\n        color: \"white\",\n        height: 48,\n        width: 300,\n        padding: \"0 30px\",\n        fontSize: \"18px\",\n        fontFamily: this.props.fontFamily\n      },\n      font: {\n        fontFamily: this.props.fontFamily\n      },\n      error: {\n        open: this.props.errorEnable,\n        usernameMessage: \"\",\n        passwordMessage: \"\",\n        confirmPasswordMessage: \"\",\n        emailMessage: \"\",\n        message: this.props.errorMessage\n      },\n      disabledButton: {\n        background: this.props.disabledButtonColor,\n        borderRadius: 3,\n        border: 0,\n        color: \"white\",\n        height: 48,\n        width: 300,\n        padding: \"0 30px\",\n        fontSize: \"18px\",\n        fontFamily: this.props.fontFamily\n      },\n      navigatePage: false,\n      signUpStyles: {\n        color: this.props.buttonColor\n      },\n       errorMessageStyles :{\n        margin: \"auto\",\n        width: \"100%\",\n        paddingBottom: \"30px\",\n        color: \"#FF0000\",\n        font: this.props.fontFamily\n      },\n      \n      signUpPassword: \"\",\n      signUpUsername: \"\",\n      signUpConfirmPassword: \"\",\n      signUpEmail: \"\",\n      loginUsername: \"\",\n      loginPassword: \"\"\n    };\n  }\n\n  /**\n   * Handle login page navigation using props\n   */\n  handleLogin = () => {\n    const { loginUsername, loginPassword } = this.state\n    this.props.handleLogin(loginUsername, loginPassword);\n\n  }\n\n  /**\n   * Hanlde sign up page navigation using props\n   */\n  handleSignUp = () => {\n    const { signUpUsername, signUpEmail, signUpPassword } = this.state\n    this.props.handleSignup(signUpUsername, signUpEmail, signUpPassword );\n\n  }\n\n  /**\n   * Handle rendering sign up content\n   */\n  navigateSignup = () => {\n    let error = this.state.error;\n    error.usernameMessage = \"\";\n    error.passwordMessage = \"\";\n\n    this.setState({\n      navigatePage: true,\n      error\n    });\n  };\n\n  /**\n   * Handle setting login usernmae state\n   * @param  {String} event Changer event of the login username\n   */\n  handleLoginUsername = event => {\n    const username = `${event.target.value}`;\n    let error = this.state.error;\n\n    error.usernameMessage = loginUsernameValidator(username);\n\n    this.setState({\n      error,\n      loginUsername: username\n    });\n  };\n\n  /**\n   * Handle setting login password state\n   * @param  {String} event Changer event of the login password\n   */\n  handleLoginPassword = event => {\n    const password = `${event.target.value}`;\n    let error = this.state.error;\n\n    error.passwordMessage = loginPasswordValidator(password);\n\n    this.setState({\n      error,\n      loginPassword: password\n    });\n  };\n\n  /**\n   * Handle button hover event for mouse enter\n   */\n  handleButtonHoverEnter = () => {\n    const propStyles = {\n      ...this.state.propStyles,\n      background: this.props.buttonHoverColor\n    };\n    this.setState({\n      propStyles\n    });\n  };\n\n  /**\n   * Handle button hover event for mouse leave\n   */\n  handleButtonHoverLeave = () => {\n    const propStyles = {\n      ...this.state.propStyles,\n      background: this.props.buttonColor\n    };\n    this.setState({\n      propStyles\n    });\n\n  };\n\n  /**\n   * Handle sign up button hover for mouse enter\n   */\n  handleSignUpHoverEnter = () => {\n    const signUpStyles = {\n      ...this.state.signUpStyles,\n      color: this.props.buttonHoverColor\n    };\n    this.setState({\n      signUpStyles\n    });\n  };\n\n  /**\n   * Handle sign up button hover for mouse leave\n   */\n  handleSignUpHoverLeave = () => {\n    const signUpStyles = {\n      ...this.state.signUpStyles,\n      color: this.props.buttonColor\n    };\n    this.setState({\n      signUpStyles\n    });\n  };\n\n  /**\n  * Handle setting signup username state\n  * @param  {String} event Changer event of the signup username\n  */\n  handleSignupUsername = event => {\n    const username = `${event.target.value}`;\n    let error = this.state.error;\n\n    error.usernameMessage = loginUsernameValidator(username);\n    error.usernameMessage = nameValidator(username);\n\n    this.setState({\n      error,\n      signUpUsername: username\n    });\n  };\n\n  /**\n   * Handle setting signup password state\n   * @param  {String} event Changer event of the signup password\n   */\n  handleSignupPassword = event => {\n    const password = `${event.target.value}`;\n    let error = this.state.error;\n    let confirmPassword = this.state.signUpConfirmPassword;\n\n    error.passwordMessage = loginPasswordValidator(password);\n    error.passwordMessage = passwordValidator(password);\n\n    error.confirmPasswordMessage = confirmPasswordValidator(\n      password,\n      confirmPassword\n    );\n\n    this.setState({\n      error,\n      signUpPassword: password\n    });\n  };\n\n  /**\n   * Handle setting signup email state\n   * @param  {String} event Changer event of the signup email\n   */\n  handleSignupEmail = event => {\n    const email = `${event.target.value}`;\n    let error = this.state.error;\n\n    //   error.emailMessage = (password);\n    error.emailMessage = emailValidator(email);\n\n    this.setState({\n      error,\n      signUpEmail: email\n    });\n  };\n\n  /**\n   * Handle setting signup confirm password state\n   * @param  {String} event Changer event of the signup confirm password\n   */\n  handleSignupConfirmPassword = event => {\n    const confirmPassword = `${event.target.value}`;\n    let error = this.state.error;\n    let password = this.state.signUpPassword;\n\n    error.confirmPasswordMessage = confirmPasswordValidator(\n      password,\n      confirmPassword\n    );\n\n    this.setState({\n      error,\n      signUpConfirmPassword: confirmPassword\n    });\n  };\n\n  /**\n  * Describes the elements on the login and sign up\n  * @return {String} HTML elements\n  */\n  render() {\n    const {\n      propStyles,\n      font,\n      error,\n      disabledButton,\n      navigatePage,\n      signUpStyles,\n      signUpPassword,\n      signUpConfirmPassword,\n      signUpEmail,\n      signUpUsername,\n      loginUsername,\n      loginPassword,\n      errorMessageStyles\n    } = this.state;\n\n    let loginButton = null;\n    let errorText = null;\n    let mainContent = null;\n    let errorList = null;\n    let signupButton = null;\n\n    let { usernameError, passwordError, emailError, confirmPasswordError } = \"\";\n\n    if (error.usernameMessage || error.passwordMessage || error.emailMessage) {\n      errorText = `${error.usernameMessage} ${error.passwordMessage} ${error.emailMessage}`;\n    } else if (error.open) {\n      errorText = error.message;\n    }\n\n    if (navigatePage) {\n      usernameError = error.usernameMessage;\n      passwordError = error.passwordMessage;\n      emailError = error.emailMessage;\n      confirmPasswordError = error.confirmPasswordMessage;\n\n      errorList = (\n        <div style={errorMessageStyles}>\n        <div  style={font}>\n        <div>{usernameError}</div>\n          <div>{passwordError}</div>\n          <div>{emailError}</div>\n          <div>{confirmPasswordError}</div>\n        </div>\n        </div>\n      );\n    }\n\n    let enebledSignUpButton = (\n      <button\n        type=\"button\"\n        style={propStyles}\n        onClick={this.handleSignUp}\n        onMouseEnter={this.handleButtonHoverEnter}\n        onMouseLeave={this.handleButtonHoverLeave}\n      >\n        Sign up\n      </button>\n    );\n\n    let disbaleSignupButton = (\n      <button type=\"button\" style={disabledButton} disabled={true}>\n        Sign up\n      </button>\n    );\n    const errorMessage = <div style={errorMessageStyles} ><div style={font}>{errorText}</div></div>;\n\n    if (\n      !signUpPassword.length ||\n      !signUpConfirmPassword ||\n      !signUpEmail ||\n      !signUpUsername\n    ) {\n      signupButton = disbaleSignupButton;\n    } else if (\n      error.confirmPasswordMessage ||\n      error.emailMessage ||\n      error.passwordMessage ||\n      error.usernameMessage\n    ) {\n      signupButton = disbaleSignupButton;\n    } else {\n      signupButton = enebledSignUpButton;\n    }\n\n    let enebledLoginButton = (\n      <button\n        type=\"button\"\n        style={propStyles}\n        onClick={this.handleLogin}\n        onMouseEnter={this.handleButtonHoverEnter}\n        onMouseLeave={this.handleButtonHoverLeave}\n      >\n        Login\n      </button>\n    );\n\n    let disbaleLoginButton = (\n      <button type=\"button\" style={disabledButton} disabled={true}>\n        Login\n      </button>\n    );\n\n\n    if (!loginUsername || !loginPassword) {\n      loginButton = disbaleLoginButton;\n    } else if (error.confirmPasswordMessage || error.emailMessage) {\n      loginButton = disbaleLoginButton;\n    } else if (error.open) {\n      loginButton = disbaleLoginButton;\n    } else {\n      loginButton = enebledLoginButton;\n    }\n\n    const login = (\n      <div className={styles.loginContainer}>\n        {errorMessage}\n        <div className={styles.loginGroup}>\n          <input\n            type=\"text\"\n            required\n            style={font}\n            onChange={this.handleLoginUsername}\n          ></input>\n          <label style={font}>Username</label>\n        </div>\n\n        <div className={styles.loginGroup}>\n          <input\n            style={font}\n            required\n            type=\"password\"\n            onChange={this.handleLoginPassword}\n          ></input>\n          <label style={font}>Password</label>\n        </div>\n\n        <div style={font}>\n          {loginButton}\n\n          <div\n            style={signUpContentStyles}\n            onClick={this.navigateSignup}\n            onMouseEnter={this.handleSignUpHoverEnter}\n            onMouseLeave={this.handleSignUpHoverLeave}\n          >\n            Don't have an account? <b style={signUpStyles}>Sign Up</b>\n          </div>\n        </div>\n      </div>\n    );\n\n    const signUp = (\n      <div>\n        <div className={styles.loginContainer}>\n          {errorList}\n          <div className={styles.loginGroup}>\n            <input\n              type=\"text\"\n              required\n              style={font}\n              onChange={this.handleSignupUsername}\n            ></input>\n            <label style={font}>Username</label>\n          </div>\n\n          <div className={styles.loginGroup}>\n            <input\n              type=\"text\"\n              required\n              style={font}\n              onChange={this.handleSignupEmail}\n            ></input>\n            <label style={font}>Email</label>\n          </div>\n\n          <div className={styles.loginGroup}>\n            <input\n              required\n              style={font}\n              type=\"password\"\n              onChange={this.handleSignupPassword}\n            ></input>\n            <label style={font}>Password</label>\n          </div>\n          <div className={styles.loginGroup}>\n            <input\n              type=\"password\"\n              required\n              style={font}\n              onChange={this.handleSignupConfirmPassword}\n            ></input>\n            <label style={font}>Confirm Password</label>\n          </div>\n\n          <div style={font}>\n            {signupButton}\n          </div>\n        </div>\n      </div>\n    );\n\n    navigatePage === false ? (mainContent = login) : (mainContent = signUp);\n\n    return <div>{mainContent}</div>;\n  }\n}\n\nexport default Home;\n\nHome.propTypes = {\n  buttonColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  disabledButtonColor: PropTypes.string,\n  buttonHoverColor: PropTypes.string,\n  errorMessage: PropTypes.string,\n  handleSignup: PropTypes.func,\n  handleLogin: PropTypes.func,\n  errorEnable: PropTypes.bool\n};\n\nHome.defaultProps = {\n  buttonColor: \"#5264AE\",\n  buttonHoverColor: \"#6373b6\",\n  disabledButtonColor: \"#a8b1d6\",\n  fontFamily: \"Nunito, Roboto, Arial, sans-serif\",\n  errorMessage: \"Username or password is incorrect❓\",\n  handleLogin: () => console.log('handle login'),\n  handleSignup: () => console.log('handle signup'),\n  errorEnable: false\n};\n\nconst signUpContentStyles = {\n  margin: \"auto\",\n  width: \"80%\",\n  paddingTop: \"40px\"\n};\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Home from './components/Home';\n\nclass LoginModal extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      navigatePage: this.props.navigatePage\n    }\n  }\n\n  render() {\n\n    return (\n      // needs to pass the propes, currently use defalt props\n      <div>\n        <Home \n          handleSignup={this.props.handleSignup}\n          handleLogin={this.props.handleLogin}\n          buttonColor={this.props.buttonColor}\n          disabledButtonColor={this.props.disabledButtonColor}\n          buttonHoverColor={this.props.buttonHoverColor}\n          fontFamily={this.props.fontFamily}\n          errorMessage={this.props.errorMessage}\n          errorEnable={this.props.errorEnable}\n\n        />\n      </div>\n\n\n    )\n  }\n}\n\nexport default LoginModal;\n\nLoginModal.propTypes = {\n  buttonColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  disabledButtonColor: PropTypes.string,\n  buttonHoverColor: PropTypes.string,\n  errorMessage: PropTypes.string,\n  handleSignup: PropTypes.func,\n  handleLogin: PropTypes.func,\n  errorEnable: PropTypes.bool\n};\n\nLoginModal.defaultProps = {\n  buttonColor: \"#5264AE\",\n  buttonHoverColor: \"#6373b6\",\n  disabledButtonColor: \"#a8b1d6\",\n  fontFamily: \"Nunito, Roboto, Arial, sans-serif\",\n  errorMessage: \"Username or password is incorrect❓\",\n  handleLogin: () => console.log('handle login'),\n  handleSignup: () => console.log('handle signup'),\n  errorEnable: false\n};\n\n"]},"metadata":{},"sourceType":"module"}