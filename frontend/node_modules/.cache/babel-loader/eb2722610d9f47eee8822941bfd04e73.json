{"ast":null,"code":"import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\n\nfunction toDate(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\n\nfunction addDays(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  date.setDate(date.getDate() + amount);\n  return date;\n}\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\n\nfunction isBefore(dirtyDate, dirtyDateToCompare) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\n\nfunction startOfDay(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\n\nfunction isSameDay(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\n\nfunction isToday(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  return isSameDay(dirtyDate, Date.now());\n}\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\n\nfunction differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls\n * `event.preventDefault()`. Not sure this is the best\n * way to do this, but it seems legit...\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */\n\n\nfunction composeEventHandlers() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return fns.some(function (fn) {\n      fn && fn.apply(void 0, [event].concat(args));\n      return event.defaultPrevented;\n    });\n  };\n}\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\n\n\nfunction requiredProp(fnName, propName) {\n  throw new Error(\"The property \\\"\" + propName + \"\\\" is required in \\\"\" + fnName + \"\\\"\");\n}\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument.\n * @param {*} arg the maybe-array\n * @return {*} the arg or it's first item\n */\n\n\nfunction unwrapChildrenForPreact(arg) {\n  arg = Array.isArray(arg) ?\n  /* istanbul ignore next (preact) */\n  arg[0] : arg;\n  return arg || noop;\n}\n\nfunction noop() {}\n/**\n * Takes a calendars array and figures out the number of months to subtract\n * based on the current offset and the minDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Number} param.offset The num of months to be subtracted\n * @param {Date} param.minDate The earliest date we are allow to subtract back to\n * @returns {Number} The number of months to subtract\n */\n\n\nfunction subtractMonth(_ref) {\n  var calendars = _ref.calendars,\n      offset = _ref.offset,\n      minDate = _ref.minDate;\n\n  if (offset > 1 && minDate) {\n    var firstDayOfMonth = calendars[0].firstDayOfMonth;\n    var diffInMonths = differenceInCalendarMonths(firstDayOfMonth, minDate);\n\n    if (diffInMonths < offset) {\n      offset = diffInMonths;\n    }\n  }\n\n  return offset;\n}\n/**\n * Takes a calendars array and figures out the number of months to add\n * based on the current offset and the maxDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Number} param.offset The num of months to be added\n * @param {Date} param.maxDate The furthest date we are allow to add forward to\n * @returns {Number} The number of months to add\n */\n\n\nfunction addMonth(_ref2) {\n  var calendars = _ref2.calendars,\n      offset = _ref2.offset,\n      maxDate = _ref2.maxDate;\n\n  if (offset > 1 && maxDate) {\n    var lastDayOfMonth = calendars[calendars.length - 1].lastDayOfMonth;\n    var diffInMonths = differenceInCalendarMonths(maxDate, lastDayOfMonth);\n\n    if (diffInMonths < offset) {\n      offset = diffInMonths;\n    }\n  }\n\n  return offset;\n}\n/**\n * Takes a calendars array and figures out if the back button should be\n * disabled based on the minDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Date} param.minDate The earliest date available\n * @returns {Boolean} Whether the back button should be disabled.\n */\n\n\nfunction isBackDisabled(_ref3) {\n  var calendars = _ref3.calendars,\n      minDate = _ref3.minDate;\n\n  if (!minDate) {\n    return false;\n  }\n\n  var firstDayOfMonth = calendars[0].firstDayOfMonth;\n  var firstDayOfMonthMinusOne = addDays(firstDayOfMonth, -1);\n\n  if (isBefore(firstDayOfMonthMinusOne, minDate)) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Takes a calendars array and figures out if the forward button should be\n * disabled based on the maxDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Date} param.maxDate The furthest date available\n * @returns {Boolean} Whether the forward button should be disabled.\n */\n\n\nfunction isForwardDisabled(_ref4) {\n  var calendars = _ref4.calendars,\n      maxDate = _ref4.maxDate;\n\n  if (!maxDate) {\n    return false;\n  }\n\n  var lastDayOfMonth = calendars[calendars.length - 1].lastDayOfMonth;\n  var lastDayOfMonthPlusOne = addDays(lastDayOfMonth, 1);\n\n  if (isBefore(maxDate, lastDayOfMonthPlusOne)) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Figures out the months data needed based off the number of monthsToDisplay\n * and other options provided.\n * @param {Object} param The param object\n * @param {Date} param.date The date to start the calendar at\n * @param {Array.<Date>} param.selected An array of dates currently selected\n * @param {Number} param.monthsToDisplay The number of months to return in the calendar view\n * @param {Number} param.offset The number of months to offset based off the param.date given\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Object>} An array of objects with month data\n */\n\n\nfunction getCalendars(_ref5) {\n  var date = _ref5.date,\n      selected = _ref5.selected,\n      monthsToDisplay = _ref5.monthsToDisplay,\n      offset = _ref5.offset,\n      minDate = _ref5.minDate,\n      maxDate = _ref5.maxDate,\n      firstDayOfWeek = _ref5.firstDayOfWeek,\n      showOutsideDays = _ref5.showOutsideDays;\n  var months = [];\n  var startDate = getStartDate(date, minDate, maxDate);\n\n  for (var i = 0; i < monthsToDisplay; i++) {\n    var calendarDates = getMonths({\n      month: startDate.getMonth() + i + offset,\n      year: startDate.getFullYear(),\n      selectedDates: selected,\n      minDate: minDate,\n      maxDate: maxDate,\n      firstDayOfWeek: firstDayOfWeek,\n      showOutsideDays: showOutsideDays\n    });\n    months.push(calendarDates);\n  }\n\n  return months;\n}\n/**\n * Figures out the actual start date based on\n * the min and max dates available.\n * @param {Date} date The we want to start the calendar at\n * @param {Date} minDate The earliest date available to start at\n * @param {Date} maxDate The latest date available to start at\n * @returns {Date} The actual start date\n */\n\n\nfunction getStartDate(date, minDate, maxDate) {\n  var startDate = startOfDay(date);\n\n  if (minDate) {\n    var minDateNormalized = startOfDay(minDate);\n\n    if (isBefore(startDate, minDateNormalized)) {\n      startDate = minDateNormalized;\n    }\n  }\n\n  if (maxDate) {\n    var maxDateNormalized = startOfDay(maxDate);\n\n    if (isBefore(maxDateNormalized, startDate)) {\n      startDate = maxDateNormalized;\n    }\n  }\n\n  return startDate;\n}\n/**\n * Figures what week/day data to return for the given month\n * and year. Adds flags to day data if found in the given selectedDates,\n * if is selectable inside the given min and max dates, or is today.\n * @param {Object} param The param object\n * @param {Number} param.month The month to grab data for\n * @param {Number} param.year The year to grab data for\n * @param {Array.<Date>} sparam.electedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Object} The data for the selected month/year\n */\n\n\nfunction getMonths(_ref6) {\n  var month = _ref6.month,\n      year = _ref6.year,\n      selectedDates = _ref6.selectedDates,\n      minDate = _ref6.minDate,\n      maxDate = _ref6.maxDate,\n      firstDayOfWeek = _ref6.firstDayOfWeek,\n      showOutsideDays = _ref6.showOutsideDays; // Get the normalized month and year, along with days in the month.\n\n  var daysMonthYear = getNumDaysMonthYear(month, year);\n  var daysInMonth = daysMonthYear.daysInMonth;\n  month = daysMonthYear.month;\n  year = daysMonthYear.year; // Fill out the dates for the month.\n\n  var dates = [];\n\n  for (var day = 1; day <= daysInMonth; day++) {\n    var date = new Date(year, month, day);\n    var dateObj = {\n      date: date,\n      selected: isSelected(selectedDates, date),\n      selectable: isSelectable(minDate, maxDate, date),\n      today: isToday(date),\n      prevMonth: false,\n      nextMonth: false\n    };\n    dates.push(dateObj);\n  }\n\n  var firstDayOfMonth = new Date(year, month, 1);\n  var lastDayOfMonth = new Date(year, month, daysInMonth);\n  var frontWeekBuffer = fillFrontWeek({\n    firstDayOfMonth: firstDayOfMonth,\n    minDate: minDate,\n    maxDate: maxDate,\n    selectedDates: selectedDates,\n    firstDayOfWeek: firstDayOfWeek,\n    showOutsideDays: showOutsideDays\n  });\n  var backWeekBuffer = fillBackWeek({\n    lastDayOfMonth: lastDayOfMonth,\n    minDate: minDate,\n    maxDate: maxDate,\n    selectedDates: selectedDates,\n    firstDayOfWeek: firstDayOfWeek,\n    showOutsideDays: showOutsideDays\n  });\n  dates.unshift.apply(dates, frontWeekBuffer);\n  dates.push.apply(dates, backWeekBuffer); // Get the filled out weeks for the\n  // given dates.\n\n  var weeks = getWeeks(dates); // return the calendar data.\n\n  return {\n    firstDayOfMonth: firstDayOfMonth,\n    lastDayOfMonth: lastDayOfMonth,\n    month: month,\n    year: year,\n    weeks: weeks\n  };\n}\n/**\n * Fill front week with either empty buffer or dates from previous month,\n * depending on showOutsideDays flag\n * @param {Object} param The param object\n * @param {Array.<Date>} param.selectedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Date} param.firstDayOfMonth First day of the month\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Date>} Buffer to fill front week\n */\n\n\nfunction fillFrontWeek(_ref7) {\n  var firstDayOfMonth = _ref7.firstDayOfMonth,\n      minDate = _ref7.minDate,\n      maxDate = _ref7.maxDate,\n      selectedDates = _ref7.selectedDates,\n      firstDayOfWeek = _ref7.firstDayOfWeek,\n      showOutsideDays = _ref7.showOutsideDays;\n  var dates = [];\n  var firstDay = (firstDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n\n  if (showOutsideDays) {\n    var lastDayOfPrevMonth = addDays(firstDayOfMonth, -1);\n    var prevDate = lastDayOfPrevMonth.getDate();\n    var prevDateMonth = lastDayOfPrevMonth.getMonth();\n    var prevDateYear = lastDayOfPrevMonth.getFullYear(); // Fill out front week for days from\n    // preceding month with dates from previous month.\n\n    var counter = 0;\n\n    while (counter < firstDay) {\n      var date = new Date(prevDateYear, prevDateMonth, prevDate - counter);\n      var dateObj = {\n        date: date,\n        selected: isSelected(selectedDates, date),\n        selectable: isSelectable(minDate, maxDate, date),\n        today: false,\n        prevMonth: true,\n        nextMonth: false\n      };\n      dates.unshift(dateObj);\n      counter++;\n    }\n  } else {\n    // Fill out front week for days from\n    // preceding month with buffer.\n    while (firstDay > 0) {\n      dates.unshift('');\n      firstDay--;\n    }\n  }\n\n  return dates;\n}\n/**\n * Fill back weeks with either empty buffer or dates from next month,\n * depending on showOutsideDays flag\n * @param {Object} param The param object\n * @param {Array.<Date>} param.selectedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Date} param.lastDayOfMonth Last day of the month\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Date>} Buffer to fill back week\n */\n\n\nfunction fillBackWeek(_ref8) {\n  var lastDayOfMonth = _ref8.lastDayOfMonth,\n      minDate = _ref8.minDate,\n      maxDate = _ref8.maxDate,\n      selectedDates = _ref8.selectedDates,\n      firstDayOfWeek = _ref8.firstDayOfWeek,\n      showOutsideDays = _ref8.showOutsideDays;\n  var dates = [];\n  var lastDay = (lastDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n\n  if (showOutsideDays) {\n    var firstDayOfNextMonth = addDays(lastDayOfMonth, 1);\n    var nextDateMonth = firstDayOfNextMonth.getMonth();\n    var nextDateYear = firstDayOfNextMonth.getFullYear(); // Fill out back week for days from\n    // following month with dates from next month.\n\n    var counter = 0;\n\n    while (counter < 6 - lastDay) {\n      var date = new Date(nextDateYear, nextDateMonth, 1 + counter);\n      var dateObj = {\n        date: date,\n        selected: isSelected(selectedDates, date),\n        selectable: isSelectable(minDate, maxDate, date),\n        today: false,\n        prevMonth: false,\n        nextMonth: true\n      };\n      dates.push(dateObj);\n      counter++;\n    }\n  } else {\n    // Fill out back week for days from\n    // following month with buffer.\n    while (lastDay < 6) {\n      dates.push('');\n      lastDay++;\n    }\n  }\n\n  return dates;\n}\n/**\n * Normalizes month (could be overflow) and year pairs and returns the\n * normalized month and year along with the number of days in the month.\n * @param {Number} month The month to normalize\n * @param {Number} year The year to normalize\n * @returns {Object} The normalized month and year along with the number of days in the month\n */\n\n\nfunction getNumDaysMonthYear(month, year) {\n  // If a parameter you specify is outside of the expected range for Month or Day,\n  // JS Date attempts to update the date information in the Date object accordingly!\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n  // Let Date handle the overflow of the month,\n  // which should return the normalized month and year.\n  var normalizedMonthYear = new Date(year, month, 1);\n  month = normalizedMonthYear.getMonth();\n  year = normalizedMonthYear.getFullYear(); // Overflow the date to the next month, then subtract the difference\n  // to get the number of days in the previous month.\n  // This will also account for leap years!\n\n  var daysInMonth = 32 - new Date(year, month, 32).getDate();\n  return {\n    daysInMonth: daysInMonth,\n    month: month,\n    year: year\n  };\n}\n/**\n * Takes an array of dates, and turns them into a multi dimensional\n * array with 7 entries for each week.\n * @param {Array.<Object>} dates An array of dates\n * @returns {Array} The weeks as a multi dimensional array\n */\n\n\nfunction getWeeks(dates) {\n  var weeksLength = Math.ceil(dates.length / 7);\n  var weeks = [];\n\n  for (var i = 0; i < weeksLength; i++) {\n    weeks[i] = [];\n\n    for (var x = 0; x < 7; x++) {\n      weeks[i].push(dates[i * 7 + x]);\n    }\n  }\n\n  return weeks;\n}\n/**\n * Normalizes dates to the beginning of the day,\n * then checks to see if the day given is found\n * in the selectedDates.\n * @param {Array.<Date>} selectedDates An array of dates currently selected\n * @param {Date} date The date to search with against selectedDates\n * @returns {Boolean} Whether day is found in selectedDates\n */\n\n\nfunction isSelected(selectedDates, date) {\n  selectedDates = Array.isArray(selectedDates) ? selectedDates : [selectedDates];\n  return selectedDates.some(function (selectedDate) {\n    if (selectedDate instanceof Date && startOfDay(selectedDate).getTime() === startOfDay(date).getTime()) {\n      return true;\n    }\n\n    return false;\n  });\n}\n/**\n * Checks to see if the date given is\n * between the min and max dates.\n * @param {Date} minDate The earliest date available\n * @param {Date} maxDate The furthest date available\n * @param {Date} date The date to compare with\n * @returns {Boolean} Whether the date is between min and max date\n */\n\n\nfunction isSelectable(minDate, maxDate, date) {\n  if (minDate && isBefore(date, minDate) || maxDate && isBefore(maxDate, date)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isOffsetControlled(propOffset) {\n  return propOffset !== undefined;\n}\n\nfunction getOffset(prop, state) {\n  return isOffsetControlled(prop) ? prop : state;\n}\n\nfunction getDateProps(onDateSelected, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      onClick = _ref.onClick,\n      _ref$dateObj = _ref.dateObj,\n      dateObj = _ref$dateObj === void 0 ? requiredProp('getDateProps', 'dateObj') : _ref$dateObj,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onClick\", \"dateObj\"]);\n\n  return _extends({\n    onClick: composeEventHandlers(onClick, function (event) {\n      onDateSelected(dateObj, event);\n    }),\n    disabled: !dateObj.selectable,\n    'aria-label': dateObj.date.toDateString(),\n    'aria-pressed': dateObj.selected,\n    role: 'button'\n  }, rest);\n}\n\nfunction getBackProps(_ref2, _temp2) {\n  var minDate = _ref2.minDate,\n      offsetMonth = _ref2.offsetMonth,\n      handleOffsetChanged = _ref2.handleOffsetChanged;\n\n  var _ref3 = _temp2 === void 0 ? {} : _temp2,\n      onClick = _ref3.onClick,\n      _ref3$offset = _ref3.offset,\n      offset = _ref3$offset === void 0 ? 1 : _ref3$offset,\n      _ref3$calendars = _ref3.calendars,\n      calendars = _ref3$calendars === void 0 ? requiredProp('getBackProps', 'calendars') : _ref3$calendars,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"onClick\", \"offset\", \"calendars\"]);\n\n  return _extends({\n    onClick: composeEventHandlers(onClick, function () {\n      handleOffsetChanged(offsetMonth - subtractMonth({\n        calendars: calendars,\n        offset: offset,\n        minDate: minDate\n      }));\n    }),\n    disabled: isBackDisabled({\n      calendars: calendars,\n      offset: offset,\n      minDate: minDate\n    }),\n    'aria-label': \"Go back \" + offset + \" month\" + (offset === 1 ? '' : 's')\n  }, rest);\n}\n\nfunction getForwardProps(_ref4, _temp3) {\n  var maxDate = _ref4.maxDate,\n      offsetMonth = _ref4.offsetMonth,\n      handleOffsetChanged = _ref4.handleOffsetChanged;\n\n  var _ref5 = _temp3 === void 0 ? {} : _temp3,\n      onClick = _ref5.onClick,\n      _ref5$offset = _ref5.offset,\n      offset = _ref5$offset === void 0 ? 1 : _ref5$offset,\n      _ref5$calendars = _ref5.calendars,\n      calendars = _ref5$calendars === void 0 ? requiredProp('getForwardProps', 'calendars') : _ref5$calendars,\n      rest = _objectWithoutPropertiesLoose(_ref5, [\"onClick\", \"offset\", \"calendars\"]);\n\n  return _extends({\n    onClick: composeEventHandlers(onClick, function () {\n      handleOffsetChanged(offsetMonth + addMonth({\n        calendars: calendars,\n        offset: offset,\n        maxDate: maxDate\n      }));\n    }),\n    disabled: isForwardDisabled({\n      calendars: calendars,\n      offset: offset,\n      maxDate: maxDate\n    }),\n    'aria-label': \"Go forward \" + offset + \" month\" + (offset === 1 ? '' : 's')\n  }, rest);\n}\n\nfunction useDayzed(_ref6) {\n  var _ref6$date = _ref6.date,\n      date = _ref6$date === void 0 ? new Date() : _ref6$date,\n      maxDate = _ref6.maxDate,\n      minDate = _ref6.minDate,\n      _ref6$monthsToDisplay = _ref6.monthsToDisplay,\n      monthsToDisplay = _ref6$monthsToDisplay === void 0 ? 1 : _ref6$monthsToDisplay,\n      _ref6$firstDayOfWeek = _ref6.firstDayOfWeek,\n      firstDayOfWeek = _ref6$firstDayOfWeek === void 0 ? 0 : _ref6$firstDayOfWeek,\n      _ref6$showOutsideDays = _ref6.showOutsideDays,\n      showOutsideDays = _ref6$showOutsideDays === void 0 ? false : _ref6$showOutsideDays,\n      offset = _ref6.offset,\n      onDateSelected = _ref6.onDateSelected,\n      _ref6$onOffsetChanged = _ref6.onOffsetChanged,\n      onOffsetChanged = _ref6$onOffsetChanged === void 0 ? function () {} : _ref6$onOffsetChanged,\n      selected = _ref6.selected;\n\n  var _useState = useState(0),\n      stateOffset = _useState[0],\n      setStateOffset = _useState[1];\n\n  var offsetMonth = getOffset(offset, stateOffset);\n\n  function handleOffsetChanged(newOffset) {\n    if (!isOffsetControlled(offset)) {\n      setStateOffset(newOffset);\n    }\n\n    onOffsetChanged(newOffset);\n  }\n\n  var calendars = getCalendars({\n    date: date,\n    selected: selected,\n    monthsToDisplay: monthsToDisplay,\n    minDate: minDate,\n    maxDate: maxDate,\n    offset: offsetMonth,\n    firstDayOfWeek: firstDayOfWeek,\n    showOutsideDays: showOutsideDays\n  });\n  return {\n    calendars: calendars,\n    getDateProps: getDateProps.bind(null, onDateSelected),\n    getBackProps: getBackProps.bind(null, {\n      minDate: minDate,\n      offsetMonth: offsetMonth,\n      handleOffsetChanged: handleOffsetChanged\n    }),\n    getForwardProps: getForwardProps.bind(null, {\n      maxDate: maxDate,\n      offsetMonth: offsetMonth,\n      handleOffsetChanged: handleOffsetChanged\n    })\n  };\n}\n\nfunction Dayzed(props) {\n  var dayzedCalendar = useDayzed(props);\n  var children = unwrapChildrenForPreact(props.render || props.children);\n  return children(dayzedCalendar);\n}\n\nDayzed.defaultProps = {\n  date: new Date(),\n  monthsToDisplay: 1,\n  onOffsetChanged: function onOffsetChanged() {},\n  firstDayOfWeek: 0,\n  showOutsideDays: false\n};\nDayzed.propTypes = {\n  render: PropTypes.func,\n  children: PropTypes.func,\n  date: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  minDate: PropTypes.instanceOf(Date),\n  monthsToDisplay: PropTypes.number,\n  firstDayOfWeek: PropTypes.number,\n  showOutsideDays: PropTypes.bool,\n  offset: PropTypes.number,\n  onDateSelected: PropTypes.func.isRequired,\n  onOffsetChanged: PropTypes.func,\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(Date), PropTypes.instanceOf(Date)])\n};\nexport default Dayzed;\nexport { useDayzed };","map":{"version":3,"sources":["/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/node_modules/dayzed/dist/dayzed.esm.js"],"names":["useState","PropTypes","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","toDate","argument","TypeError","argStr","toString","Date","getTime","console","warn","Error","stack","addDays","dirtyDate","dirtyAmount","date","amount","setDate","getDate","isBefore","dirtyDateToCompare","dateToCompare","startOfDay","setHours","isSameDay","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","dateRightStartOfDay","isToday","now","differenceInCalendarMonths","dateLeft","dateRight","yearDiff","getFullYear","monthDiff","getMonth","composeEventHandlers","_len","fns","Array","_key","event","_len2","args","_key2","some","fn","concat","defaultPrevented","requiredProp","fnName","propName","unwrapChildrenForPreact","arg","isArray","noop","subtractMonth","_ref","calendars","offset","minDate","firstDayOfMonth","diffInMonths","addMonth","_ref2","maxDate","lastDayOfMonth","isBackDisabled","_ref3","firstDayOfMonthMinusOne","isForwardDisabled","_ref4","lastDayOfMonthPlusOne","getCalendars","_ref5","selected","monthsToDisplay","firstDayOfWeek","showOutsideDays","months","startDate","getStartDate","calendarDates","getMonths","month","year","selectedDates","push","minDateNormalized","maxDateNormalized","_ref6","daysMonthYear","getNumDaysMonthYear","daysInMonth","dates","day","dateObj","isSelected","selectable","isSelectable","today","prevMonth","nextMonth","frontWeekBuffer","fillFrontWeek","backWeekBuffer","fillBackWeek","unshift","weeks","getWeeks","_ref7","firstDay","getDay","lastDayOfPrevMonth","prevDate","prevDateMonth","prevDateYear","counter","_ref8","lastDay","firstDayOfNextMonth","nextDateMonth","nextDateYear","normalizedMonthYear","weeksLength","x","selectedDate","isOffsetControlled","propOffset","undefined","getOffset","prop","state","getDateProps","onDateSelected","_temp","onClick","_ref$dateObj","rest","disabled","toDateString","role","getBackProps","_temp2","offsetMonth","handleOffsetChanged","_ref3$offset","_ref3$calendars","getForwardProps","_temp3","_ref5$offset","_ref5$calendars","useDayzed","_ref6$date","_ref6$monthsToDisplay","_ref6$firstDayOfWeek","_ref6$showOutsideDays","_ref6$onOffsetChanged","onOffsetChanged","_useState","stateOffset","setStateOffset","newOffset","bind","Dayzed","props","dayzedCalendar","children","render","defaultProps","propTypes","func","instanceOf","bool","isRequired","oneOfType","arrayOf"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nfunction addDays(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  date.setDate(date.getDate() + amount);\n  return date;\n}\n\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nfunction isBefore(dirtyDate, dirtyDateToCompare) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nfunction startOfDay(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nfunction isSameDay(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nfunction isToday(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  return isSameDay(dirtyDate, Date.now());\n}\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nfunction differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}\n\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls\n * `event.preventDefault()`. Not sure this is the best\n * way to do this, but it seems legit...\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */\n\nfunction composeEventHandlers() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    return fns.some(function (fn) {\n      fn && fn.apply(void 0, [event].concat(args));\n      return event.defaultPrevented;\n    });\n  };\n}\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\n\nfunction requiredProp(fnName, propName) {\n  throw new Error(\"The property \\\"\" + propName + \"\\\" is required in \\\"\" + fnName + \"\\\"\");\n}\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument.\n * @param {*} arg the maybe-array\n * @return {*} the arg or it's first item\n */\n\nfunction unwrapChildrenForPreact(arg) {\n  arg = Array.isArray(arg) ?\n  /* istanbul ignore next (preact) */\n  arg[0] : arg;\n  return arg || noop;\n}\n\nfunction noop() {}\n/**\n * Takes a calendars array and figures out the number of months to subtract\n * based on the current offset and the minDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Number} param.offset The num of months to be subtracted\n * @param {Date} param.minDate The earliest date we are allow to subtract back to\n * @returns {Number} The number of months to subtract\n */\n\n\nfunction subtractMonth(_ref) {\n  var calendars = _ref.calendars,\n      offset = _ref.offset,\n      minDate = _ref.minDate;\n\n  if (offset > 1 && minDate) {\n    var firstDayOfMonth = calendars[0].firstDayOfMonth;\n    var diffInMonths = differenceInCalendarMonths(firstDayOfMonth, minDate);\n\n    if (diffInMonths < offset) {\n      offset = diffInMonths;\n    }\n  }\n\n  return offset;\n}\n/**\n * Takes a calendars array and figures out the number of months to add\n * based on the current offset and the maxDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Number} param.offset The num of months to be added\n * @param {Date} param.maxDate The furthest date we are allow to add forward to\n * @returns {Number} The number of months to add\n */\n\nfunction addMonth(_ref2) {\n  var calendars = _ref2.calendars,\n      offset = _ref2.offset,\n      maxDate = _ref2.maxDate;\n\n  if (offset > 1 && maxDate) {\n    var lastDayOfMonth = calendars[calendars.length - 1].lastDayOfMonth;\n    var diffInMonths = differenceInCalendarMonths(maxDate, lastDayOfMonth);\n\n    if (diffInMonths < offset) {\n      offset = diffInMonths;\n    }\n  }\n\n  return offset;\n}\n/**\n * Takes a calendars array and figures out if the back button should be\n * disabled based on the minDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Date} param.minDate The earliest date available\n * @returns {Boolean} Whether the back button should be disabled.\n */\n\nfunction isBackDisabled(_ref3) {\n  var calendars = _ref3.calendars,\n      minDate = _ref3.minDate;\n\n  if (!minDate) {\n    return false;\n  }\n\n  var firstDayOfMonth = calendars[0].firstDayOfMonth;\n  var firstDayOfMonthMinusOne = addDays(firstDayOfMonth, -1);\n\n  if (isBefore(firstDayOfMonthMinusOne, minDate)) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Takes a calendars array and figures out if the forward button should be\n * disabled based on the maxDate allowed.\n * @param {Object} param The param object\n * @param {Array} param.calendars The calendars array created by the getCalendars function\n * @param {Date} param.maxDate The furthest date available\n * @returns {Boolean} Whether the forward button should be disabled.\n */\n\nfunction isForwardDisabled(_ref4) {\n  var calendars = _ref4.calendars,\n      maxDate = _ref4.maxDate;\n\n  if (!maxDate) {\n    return false;\n  }\n\n  var lastDayOfMonth = calendars[calendars.length - 1].lastDayOfMonth;\n  var lastDayOfMonthPlusOne = addDays(lastDayOfMonth, 1);\n\n  if (isBefore(maxDate, lastDayOfMonthPlusOne)) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Figures out the months data needed based off the number of monthsToDisplay\n * and other options provided.\n * @param {Object} param The param object\n * @param {Date} param.date The date to start the calendar at\n * @param {Array.<Date>} param.selected An array of dates currently selected\n * @param {Number} param.monthsToDisplay The number of months to return in the calendar view\n * @param {Number} param.offset The number of months to offset based off the param.date given\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Object>} An array of objects with month data\n */\n\nfunction getCalendars(_ref5) {\n  var date = _ref5.date,\n      selected = _ref5.selected,\n      monthsToDisplay = _ref5.monthsToDisplay,\n      offset = _ref5.offset,\n      minDate = _ref5.minDate,\n      maxDate = _ref5.maxDate,\n      firstDayOfWeek = _ref5.firstDayOfWeek,\n      showOutsideDays = _ref5.showOutsideDays;\n  var months = [];\n  var startDate = getStartDate(date, minDate, maxDate);\n\n  for (var i = 0; i < monthsToDisplay; i++) {\n    var calendarDates = getMonths({\n      month: startDate.getMonth() + i + offset,\n      year: startDate.getFullYear(),\n      selectedDates: selected,\n      minDate: minDate,\n      maxDate: maxDate,\n      firstDayOfWeek: firstDayOfWeek,\n      showOutsideDays: showOutsideDays\n    });\n    months.push(calendarDates);\n  }\n\n  return months;\n}\n/**\n * Figures out the actual start date based on\n * the min and max dates available.\n * @param {Date} date The we want to start the calendar at\n * @param {Date} minDate The earliest date available to start at\n * @param {Date} maxDate The latest date available to start at\n * @returns {Date} The actual start date\n */\n\nfunction getStartDate(date, minDate, maxDate) {\n  var startDate = startOfDay(date);\n\n  if (minDate) {\n    var minDateNormalized = startOfDay(minDate);\n\n    if (isBefore(startDate, minDateNormalized)) {\n      startDate = minDateNormalized;\n    }\n  }\n\n  if (maxDate) {\n    var maxDateNormalized = startOfDay(maxDate);\n\n    if (isBefore(maxDateNormalized, startDate)) {\n      startDate = maxDateNormalized;\n    }\n  }\n\n  return startDate;\n}\n/**\n * Figures what week/day data to return for the given month\n * and year. Adds flags to day data if found in the given selectedDates,\n * if is selectable inside the given min and max dates, or is today.\n * @param {Object} param The param object\n * @param {Number} param.month The month to grab data for\n * @param {Number} param.year The year to grab data for\n * @param {Array.<Date>} sparam.electedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Object} The data for the selected month/year\n */\n\n\nfunction getMonths(_ref6) {\n  var month = _ref6.month,\n      year = _ref6.year,\n      selectedDates = _ref6.selectedDates,\n      minDate = _ref6.minDate,\n      maxDate = _ref6.maxDate,\n      firstDayOfWeek = _ref6.firstDayOfWeek,\n      showOutsideDays = _ref6.showOutsideDays;\n  // Get the normalized month and year, along with days in the month.\n  var daysMonthYear = getNumDaysMonthYear(month, year);\n  var daysInMonth = daysMonthYear.daysInMonth;\n  month = daysMonthYear.month;\n  year = daysMonthYear.year; // Fill out the dates for the month.\n\n  var dates = [];\n\n  for (var day = 1; day <= daysInMonth; day++) {\n    var date = new Date(year, month, day);\n    var dateObj = {\n      date: date,\n      selected: isSelected(selectedDates, date),\n      selectable: isSelectable(minDate, maxDate, date),\n      today: isToday(date),\n      prevMonth: false,\n      nextMonth: false\n    };\n    dates.push(dateObj);\n  }\n\n  var firstDayOfMonth = new Date(year, month, 1);\n  var lastDayOfMonth = new Date(year, month, daysInMonth);\n  var frontWeekBuffer = fillFrontWeek({\n    firstDayOfMonth: firstDayOfMonth,\n    minDate: minDate,\n    maxDate: maxDate,\n    selectedDates: selectedDates,\n    firstDayOfWeek: firstDayOfWeek,\n    showOutsideDays: showOutsideDays\n  });\n  var backWeekBuffer = fillBackWeek({\n    lastDayOfMonth: lastDayOfMonth,\n    minDate: minDate,\n    maxDate: maxDate,\n    selectedDates: selectedDates,\n    firstDayOfWeek: firstDayOfWeek,\n    showOutsideDays: showOutsideDays\n  });\n  dates.unshift.apply(dates, frontWeekBuffer);\n  dates.push.apply(dates, backWeekBuffer); // Get the filled out weeks for the\n  // given dates.\n\n  var weeks = getWeeks(dates); // return the calendar data.\n\n  return {\n    firstDayOfMonth: firstDayOfMonth,\n    lastDayOfMonth: lastDayOfMonth,\n    month: month,\n    year: year,\n    weeks: weeks\n  };\n}\n/**\n * Fill front week with either empty buffer or dates from previous month,\n * depending on showOutsideDays flag\n * @param {Object} param The param object\n * @param {Array.<Date>} param.selectedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Date} param.firstDayOfMonth First day of the month\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Date>} Buffer to fill front week\n */\n\n\nfunction fillFrontWeek(_ref7) {\n  var firstDayOfMonth = _ref7.firstDayOfMonth,\n      minDate = _ref7.minDate,\n      maxDate = _ref7.maxDate,\n      selectedDates = _ref7.selectedDates,\n      firstDayOfWeek = _ref7.firstDayOfWeek,\n      showOutsideDays = _ref7.showOutsideDays;\n  var dates = [];\n  var firstDay = (firstDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n\n  if (showOutsideDays) {\n    var lastDayOfPrevMonth = addDays(firstDayOfMonth, -1);\n    var prevDate = lastDayOfPrevMonth.getDate();\n    var prevDateMonth = lastDayOfPrevMonth.getMonth();\n    var prevDateYear = lastDayOfPrevMonth.getFullYear(); // Fill out front week for days from\n    // preceding month with dates from previous month.\n\n    var counter = 0;\n\n    while (counter < firstDay) {\n      var date = new Date(prevDateYear, prevDateMonth, prevDate - counter);\n      var dateObj = {\n        date: date,\n        selected: isSelected(selectedDates, date),\n        selectable: isSelectable(minDate, maxDate, date),\n        today: false,\n        prevMonth: true,\n        nextMonth: false\n      };\n      dates.unshift(dateObj);\n      counter++;\n    }\n  } else {\n    // Fill out front week for days from\n    // preceding month with buffer.\n    while (firstDay > 0) {\n      dates.unshift('');\n      firstDay--;\n    }\n  }\n\n  return dates;\n}\n/**\n * Fill back weeks with either empty buffer or dates from next month,\n * depending on showOutsideDays flag\n * @param {Object} param The param object\n * @param {Array.<Date>} param.selectedDates An array of dates currently selected\n * @param {Date} param.minDate The earliest date available\n * @param {Date} param.maxDate The furthest date available\n * @param {Date} param.lastDayOfMonth Last day of the month\n * @param {Number} param.firstDayOfWeek First day of week, 0-6 (Sunday to Saturday)\n * @param {Bool} param.showOutsideDays Flag to fill front and back weeks with dates from adjacent months\n * @returns {Array.<Date>} Buffer to fill back week\n */\n\n\nfunction fillBackWeek(_ref8) {\n  var lastDayOfMonth = _ref8.lastDayOfMonth,\n      minDate = _ref8.minDate,\n      maxDate = _ref8.maxDate,\n      selectedDates = _ref8.selectedDates,\n      firstDayOfWeek = _ref8.firstDayOfWeek,\n      showOutsideDays = _ref8.showOutsideDays;\n  var dates = [];\n  var lastDay = (lastDayOfMonth.getDay() + 7 - firstDayOfWeek) % 7;\n\n  if (showOutsideDays) {\n    var firstDayOfNextMonth = addDays(lastDayOfMonth, 1);\n    var nextDateMonth = firstDayOfNextMonth.getMonth();\n    var nextDateYear = firstDayOfNextMonth.getFullYear(); // Fill out back week for days from\n    // following month with dates from next month.\n\n    var counter = 0;\n\n    while (counter < 6 - lastDay) {\n      var date = new Date(nextDateYear, nextDateMonth, 1 + counter);\n      var dateObj = {\n        date: date,\n        selected: isSelected(selectedDates, date),\n        selectable: isSelectable(minDate, maxDate, date),\n        today: false,\n        prevMonth: false,\n        nextMonth: true\n      };\n      dates.push(dateObj);\n      counter++;\n    }\n  } else {\n    // Fill out back week for days from\n    // following month with buffer.\n    while (lastDay < 6) {\n      dates.push('');\n      lastDay++;\n    }\n  }\n\n  return dates;\n}\n/**\n * Normalizes month (could be overflow) and year pairs and returns the\n * normalized month and year along with the number of days in the month.\n * @param {Number} month The month to normalize\n * @param {Number} year The year to normalize\n * @returns {Object} The normalized month and year along with the number of days in the month\n */\n\n\nfunction getNumDaysMonthYear(month, year) {\n  // If a parameter you specify is outside of the expected range for Month or Day,\n  // JS Date attempts to update the date information in the Date object accordingly!\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n  // Let Date handle the overflow of the month,\n  // which should return the normalized month and year.\n  var normalizedMonthYear = new Date(year, month, 1);\n  month = normalizedMonthYear.getMonth();\n  year = normalizedMonthYear.getFullYear(); // Overflow the date to the next month, then subtract the difference\n  // to get the number of days in the previous month.\n  // This will also account for leap years!\n\n  var daysInMonth = 32 - new Date(year, month, 32).getDate();\n  return {\n    daysInMonth: daysInMonth,\n    month: month,\n    year: year\n  };\n}\n/**\n * Takes an array of dates, and turns them into a multi dimensional\n * array with 7 entries for each week.\n * @param {Array.<Object>} dates An array of dates\n * @returns {Array} The weeks as a multi dimensional array\n */\n\n\nfunction getWeeks(dates) {\n  var weeksLength = Math.ceil(dates.length / 7);\n  var weeks = [];\n\n  for (var i = 0; i < weeksLength; i++) {\n    weeks[i] = [];\n\n    for (var x = 0; x < 7; x++) {\n      weeks[i].push(dates[i * 7 + x]);\n    }\n  }\n\n  return weeks;\n}\n/**\n * Normalizes dates to the beginning of the day,\n * then checks to see if the day given is found\n * in the selectedDates.\n * @param {Array.<Date>} selectedDates An array of dates currently selected\n * @param {Date} date The date to search with against selectedDates\n * @returns {Boolean} Whether day is found in selectedDates\n */\n\n\nfunction isSelected(selectedDates, date) {\n  selectedDates = Array.isArray(selectedDates) ? selectedDates : [selectedDates];\n  return selectedDates.some(function (selectedDate) {\n    if (selectedDate instanceof Date && startOfDay(selectedDate).getTime() === startOfDay(date).getTime()) {\n      return true;\n    }\n\n    return false;\n  });\n}\n/**\n * Checks to see if the date given is\n * between the min and max dates.\n * @param {Date} minDate The earliest date available\n * @param {Date} maxDate The furthest date available\n * @param {Date} date The date to compare with\n * @returns {Boolean} Whether the date is between min and max date\n */\n\n\nfunction isSelectable(minDate, maxDate, date) {\n  if (minDate && isBefore(date, minDate) || maxDate && isBefore(maxDate, date)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isOffsetControlled(propOffset) {\n  return propOffset !== undefined;\n}\n\nfunction getOffset(prop, state) {\n  return isOffsetControlled(prop) ? prop : state;\n}\n\nfunction getDateProps(onDateSelected, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      onClick = _ref.onClick,\n      _ref$dateObj = _ref.dateObj,\n      dateObj = _ref$dateObj === void 0 ? requiredProp('getDateProps', 'dateObj') : _ref$dateObj,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onClick\", \"dateObj\"]);\n\n  return _extends({\n    onClick: composeEventHandlers(onClick, function (event) {\n      onDateSelected(dateObj, event);\n    }),\n    disabled: !dateObj.selectable,\n    'aria-label': dateObj.date.toDateString(),\n    'aria-pressed': dateObj.selected,\n    role: 'button'\n  }, rest);\n}\n\nfunction getBackProps(_ref2, _temp2) {\n  var minDate = _ref2.minDate,\n      offsetMonth = _ref2.offsetMonth,\n      handleOffsetChanged = _ref2.handleOffsetChanged;\n\n  var _ref3 = _temp2 === void 0 ? {} : _temp2,\n      onClick = _ref3.onClick,\n      _ref3$offset = _ref3.offset,\n      offset = _ref3$offset === void 0 ? 1 : _ref3$offset,\n      _ref3$calendars = _ref3.calendars,\n      calendars = _ref3$calendars === void 0 ? requiredProp('getBackProps', 'calendars') : _ref3$calendars,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"onClick\", \"offset\", \"calendars\"]);\n\n  return _extends({\n    onClick: composeEventHandlers(onClick, function () {\n      handleOffsetChanged(offsetMonth - subtractMonth({\n        calendars: calendars,\n        offset: offset,\n        minDate: minDate\n      }));\n    }),\n    disabled: isBackDisabled({\n      calendars: calendars,\n      offset: offset,\n      minDate: minDate\n    }),\n    'aria-label': \"Go back \" + offset + \" month\" + (offset === 1 ? '' : 's')\n  }, rest);\n}\n\nfunction getForwardProps(_ref4, _temp3) {\n  var maxDate = _ref4.maxDate,\n      offsetMonth = _ref4.offsetMonth,\n      handleOffsetChanged = _ref4.handleOffsetChanged;\n\n  var _ref5 = _temp3 === void 0 ? {} : _temp3,\n      onClick = _ref5.onClick,\n      _ref5$offset = _ref5.offset,\n      offset = _ref5$offset === void 0 ? 1 : _ref5$offset,\n      _ref5$calendars = _ref5.calendars,\n      calendars = _ref5$calendars === void 0 ? requiredProp('getForwardProps', 'calendars') : _ref5$calendars,\n      rest = _objectWithoutPropertiesLoose(_ref5, [\"onClick\", \"offset\", \"calendars\"]);\n\n  return _extends({\n    onClick: composeEventHandlers(onClick, function () {\n      handleOffsetChanged(offsetMonth + addMonth({\n        calendars: calendars,\n        offset: offset,\n        maxDate: maxDate\n      }));\n    }),\n    disabled: isForwardDisabled({\n      calendars: calendars,\n      offset: offset,\n      maxDate: maxDate\n    }),\n    'aria-label': \"Go forward \" + offset + \" month\" + (offset === 1 ? '' : 's')\n  }, rest);\n}\n\nfunction useDayzed(_ref6) {\n  var _ref6$date = _ref6.date,\n      date = _ref6$date === void 0 ? new Date() : _ref6$date,\n      maxDate = _ref6.maxDate,\n      minDate = _ref6.minDate,\n      _ref6$monthsToDisplay = _ref6.monthsToDisplay,\n      monthsToDisplay = _ref6$monthsToDisplay === void 0 ? 1 : _ref6$monthsToDisplay,\n      _ref6$firstDayOfWeek = _ref6.firstDayOfWeek,\n      firstDayOfWeek = _ref6$firstDayOfWeek === void 0 ? 0 : _ref6$firstDayOfWeek,\n      _ref6$showOutsideDays = _ref6.showOutsideDays,\n      showOutsideDays = _ref6$showOutsideDays === void 0 ? false : _ref6$showOutsideDays,\n      offset = _ref6.offset,\n      onDateSelected = _ref6.onDateSelected,\n      _ref6$onOffsetChanged = _ref6.onOffsetChanged,\n      onOffsetChanged = _ref6$onOffsetChanged === void 0 ? function () {} : _ref6$onOffsetChanged,\n      selected = _ref6.selected;\n\n  var _useState = useState(0),\n      stateOffset = _useState[0],\n      setStateOffset = _useState[1];\n\n  var offsetMonth = getOffset(offset, stateOffset);\n\n  function handleOffsetChanged(newOffset) {\n    if (!isOffsetControlled(offset)) {\n      setStateOffset(newOffset);\n    }\n\n    onOffsetChanged(newOffset);\n  }\n\n  var calendars = getCalendars({\n    date: date,\n    selected: selected,\n    monthsToDisplay: monthsToDisplay,\n    minDate: minDate,\n    maxDate: maxDate,\n    offset: offsetMonth,\n    firstDayOfWeek: firstDayOfWeek,\n    showOutsideDays: showOutsideDays\n  });\n  return {\n    calendars: calendars,\n    getDateProps: getDateProps.bind(null, onDateSelected),\n    getBackProps: getBackProps.bind(null, {\n      minDate: minDate,\n      offsetMonth: offsetMonth,\n      handleOffsetChanged: handleOffsetChanged\n    }),\n    getForwardProps: getForwardProps.bind(null, {\n      maxDate: maxDate,\n      offsetMonth: offsetMonth,\n      handleOffsetChanged: handleOffsetChanged\n    })\n  };\n}\n\nfunction Dayzed(props) {\n  var dayzedCalendar = useDayzed(props);\n  var children = unwrapChildrenForPreact(props.render || props.children);\n  return children(dayzedCalendar);\n}\n\nDayzed.defaultProps = {\n  date: new Date(),\n  monthsToDisplay: 1,\n  onOffsetChanged: function onOffsetChanged() {},\n  firstDayOfWeek: 0,\n  showOutsideDays: false\n};\nDayzed.propTypes = {\n  render: PropTypes.func,\n  children: PropTypes.func,\n  date: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  minDate: PropTypes.instanceOf(Date),\n  monthsToDisplay: PropTypes.number,\n  firstDayOfWeek: PropTypes.number,\n  showOutsideDays: PropTypes.bool,\n  offset: PropTypes.number,\n  onDateSelected: PropTypes.func.isRequired,\n  onOffsetChanged: PropTypes.func,\n  selected: PropTypes.oneOfType([PropTypes.arrayOf(Date), PropTypes.instanceOf(Date)])\n};\n\nexport default Dayzed;\nexport { useDayzed };\n"]},"metadata":{},"sourceType":"module"}