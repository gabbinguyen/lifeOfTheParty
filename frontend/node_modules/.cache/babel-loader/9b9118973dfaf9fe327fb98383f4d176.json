{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar date_fns_1 = require('date-fns');\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar parseTokenDateTimeDelimeter = /[T ]/;\nvar parseTokenPlainTime = /:/; // year tokens\n\nvar parseTokenYY = /^(\\d{2})$/;\nvar parseTokensYYY = [/^([+-]\\d{2})$/, /^([+-]\\d{3})$/, /^([+-]\\d{4})$/ // 2 additional digits\n];\nvar parseTokenYYYY = /^(\\d{4})/;\nvar parseTokensYYYYY = [/^([+-]\\d{4})/, /^([+-]\\d{5})/, /^([+-]\\d{6})/ // 2 additional digits\n]; // date tokens\n\nvar parseTokenMM = /^-(\\d{2})$/;\nvar parseTokenDDD = /^-?(\\d{3})$/;\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/;\nvar parseTokenWww = /^-?W(\\d{2})$/;\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/; // time tokens\n\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/;\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/;\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/; // timezone tokens\n\nvar parseTokenTimezone = /([Z+-].*)$/;\nvar parseTokenTimezoneZ = /^(Z)$/;\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/;\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/;\n\nfunction legacyParse(argument, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (date_fns_1.isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument !== 'string') {\n    return new Date(argument);\n  }\n\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date || '', additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString || '', year);\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset = void 0;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time) || 0;\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE;\n    } else {\n      var fullTime = timestamp + time;\n      var fullTimeDate = new Date(fullTime);\n      offset = getTimezoneOffsetInMilliseconds(fullTimeDate); // Adjust time when it's coming from DST\n\n      var fullTimeDateNextDay = new Date(fullTime);\n      fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1);\n      var offsetDiff = getTimezoneOffsetInMilliseconds(fullTimeDateNextDay) - getTimezoneOffsetInMilliseconds(fullTimeDate);\n\n      if (offsetDiff > 0) {\n        offset += offsetDiff;\n      }\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(argument);\n  }\n}\n\nexports.default = legacyParse;\n\nfunction splitDateString(dateString) {\n  var array = dateString.split(parseTokenDateTimeDelimeter);\n  var timeString, date, time, timezone;\n\n  if (parseTokenPlainTime.test(array[0])) {\n    date = undefined;\n    timeString = array[0];\n  } else {\n    date = array[0];\n    timeString = array[1];\n  }\n\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString);\n\n    if (token) {\n      time = timeString.replace(token[1], '');\n      timezone = token[1];\n    } else {\n      time = timeString;\n    }\n  }\n\n  return {\n    date: date,\n    time: time,\n    timezone: timezone\n  };\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits];\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = parseTokenMM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = parseTokenDDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // YYYY-MM-DD or YYYYMMDD\n\n\n  token = parseTokenMMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = parseTokenWww.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    return dayOfISOYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = parseTokenWwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n    return dayOfISOYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = parseTokenHH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = parseTokenHHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = parseTokenHHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction parseTimezone(timezoneString) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = parseTokenTimezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  } // ±hh\n\n\n  token = parseTokenTimezoneHH.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = parseTokenTimezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10);\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  }\n\n  return 0;\n}\n\nfunction dayOfISOYear(isoYear, week, day) {\n  if (week === void 0) {\n    week = 0;\n  }\n\n  if (day === void 0) {\n    day = 0;\n  }\n\n  var date = new Date(0);\n  date.setUTCFullYear(isoYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\nfunction getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = date.getTimezoneOffset();\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","map":{"version":3,"sources":["../../../src/v2/legacyParse/index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,oBAAoB,GAAG,OAA7B;AACA,IAAM,sBAAsB,GAAG,KAA/B;AACA,IAAM,yBAAyB,GAAG,CAAlC;AAEA,IAAM,2BAA2B,GAAG,MAApC;AACA,IAAM,mBAAmB,GAAG,GAA5B,C,CAEA;;AACA,IAAM,YAAY,GAAG,WAArB;AACA,IAAM,cAAc,GAAG,CACrB,eADqB,EAErB,eAFqB,EAGrB,eAHqB,CAGrB;AAHqB,CAAvB;AAMA,IAAM,cAAc,GAAG,UAAvB;AACA,IAAM,gBAAgB,GAAG,CACvB,cADuB,EAEvB,cAFuB,EAGvB,cAHuB,CAGvB;AAHuB,CAAzB,C,CAMA;;AACA,IAAM,YAAY,GAAG,YAArB;AACA,IAAM,aAAa,GAAG,aAAtB;AACA,IAAM,cAAc,GAAG,sBAAvB;AACA,IAAM,aAAa,GAAG,cAAtB;AACA,IAAM,cAAc,GAAG,uBAAvB,C,CAEA;;AACA,IAAM,YAAY,GAAG,qBAArB;AACA,IAAM,cAAc,GAAG,8BAAvB;AACA,IAAM,gBAAgB,GAAG,uCAAzB,C,CAEA;;AACA,IAAM,kBAAkB,GAAG,YAA3B;AACA,IAAM,mBAAmB,GAAG,OAA5B;AACA,IAAM,oBAAoB,GAAG,iBAA7B;AACA,IAAM,sBAAsB,GAAG,0BAA/B;;AAMA,SAAwB,WAAxB,CACE,QADF,EAEE,OAFF,EAEkC;AAAhC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAEA,IAAA,OAAI,GAAA,EAAJ;AACE;;MACA,UAAO,CAAA,MAAP,CAAgB,QAAhB,C,EAAyB;AAC1B;AAAM,WAAA,IAAI,IAAJ,CAAW,QAAQ,CAAA,OAAR,EAAX,CAAA;AACL,G,MAAA,IAAA,OAAW,QAAX,KAAyB,QAAzB,EAAyB;AAC1B,WAAA,IAAA,IAAA,CAAA,QAAA,CAAA;AAED;;MAEI,gBAAE,GACF,OAAE,CAAA,gBAAF,IAAiB,IAAjB,GAEE,yBAFF,GAIE,MAAA,CAAA,OAAA,CAAe,gBAAf,C;AACN,MAAA,WAAa,GAAA,eAAoB,CAAA,QAAA,CAAjC;AACA,MAAA,eAAM,GAAc,SAAG,CAAA,WAAgB,CAAA,IAAhB,IAAgB,EAAhB,EAA8B,gBAA9B,CAAvB;AAEA,MAAA,IAAM,GAAI,eAAa,CAAA,IAAvB;AAEA,MAAA,cAAU,GAAA,eAAA,CAAA,cAAV;MACE,IAAA,GAAM,SAAS,CAAA,cAAe,IAAE,EAAjB,EAAiB,IAAjB,C;;MACf,I,EAAI;QACJ,SAAI,GAAM,IAAA,CAAA,OAAA,E;QAEV,IAAI,GAAA,C;QACF,MAAA,GAAI,KAAG,C;;QACR,WAAA,CAAA,I,EAAA;AAED,MAAA,IAAA,GAAI,SAAA,CAAW,WAAW,CAAA,IAAtB,CAAA,IAAsB,CAA1B;AACE;;QACD,WAAA,CAAA,Q,EAAA;YAAM,GAAA,aAAA,CAAA,WAAA,CAAA,QAAA,CAAA,GAAA,sB;WACL;UACA,QAAM,GAAA,SAAY,GAAG,I;UAErB,YAAS,GAAA,IAAA,IAAA,CAAA,QAAA,C;YAET,GAAA,+BAAA,CAAA,YAAA,C,CALA,CAMA;;UACA,mBAAA,GAAoB,IAAA,IAAA,CAAQ,QAAR,C;AACpB,MAAA,mBAAM,CAAU,OAAhB,CACE,YAAA,CAAA,OAAA,KAAA,CADF;UAEE,UAAA,GACF,+BAAoB,CAAA,mBAAA,CAApB,GACE,+BAAoB,CAAA,YAAA,C;;UACrB,UAAA,GAAA,C,EAAA;AACF,QAAA,MAAA,IAAA,UAAA;AAED;AACD;;AAAM,WAAA,IAAA,IAAA,CAAA,SAAA,GAAA,IAAA,GAAA,MAAA,CAAA;AACL,G,MAAA;AACD,WAAA,IAAA,IAAA,CAAA,QAAA,CAAA;AACF;AAxDD;;AAgEA,OAAA,CAAA,OAAA,GAAS,WAAT;;AACE,SAAM,eAAN,CAAc,UAAd,EAA+B;AAC/B,MAAA,KAAI,GAAA,UAAgB,CAAA,KAAhB,CAAsB,2BAAtB,CAAJ;AAEA,MAAA,UAAA,EAAI,IAAJ,EAAI,IAAJ,EAAwB,QAAxB;;MACE,mBAAgB,CAAA,IAAhB,CAAgB,KAAA,CAAA,CAAA,CAAhB,C,EAAgB;QAChB,GAAA,S;AACD,IAAA,UAAA,GAAA,KAAA,CAAA,CAAA,CAAA;SAAM;QACL,GAAA,KAAO,CAAA,CAAA,C;AACP,IAAA,UAAA,GAAA,KAAa,CAAA,CAAA,CAAb;AACD;;AAED,MAAA,UAAA,EAAc;QACZ,KAAM,GAAA,kBAAQ,CAAA,IAAR,CAA2B,UAA3B,C;;QACN,K,EAAI;UACF,GAAA,UAAO,CAAA,OAAP,CAAkB,KAAO,CAAC,CAAD,CAAzB,EAA0B,EAA1B,C;AACA,MAAA,QAAA,GAAA,KAAQ,CAAG,CAAH,CAAR;AACD,K,MAAA;aAAM,U;AACL;AACD;;AACF,SAAA;AAED,IAAA,IAAA,EAAA,IAFC;QAGC,EAAA,IAHD;AAIC,IAAA,QAAI,EAAA;AAJL,GAAA;AAMA;;AACH,SAAC,SAAD,CAAC,UAAD,EAAC,gBAAD,EAAC;AAED,MAAA,aAAmB,GAAA,cAAoB,CAAA,gBAAA,CAAvC;AACE,MAAA,eAAmB,GAAG,gBAAe,CAAA,gBAAA,CAArC;AACA,MAAA,KAAA,CAJD,CAMC;;AAEA,EAAA,KAAA,GAAA,cAAiB,CAAA,IAAjB,CAAiB,UAAjB,KAAiB,eAAA,CAAA,IAAA,CAAA,UAAA,CAAjB;;AACA,MAAA,KAAA,EAAQ;AACR,QAAI,UAAO,GAAA,KAAA,CAAA,CAAA,CAAX;AACE,WAAA;AACA,MAAA,IAAA,EAAA,QAAO,CAAA,UAAA,EAAA,EAAA,CADP;AAEE,MAAA,cAAM,EAAA,UAAS,CAAA,KAAT,CAAqB,UAAG,CAAA,MAAxB;AAFR,KAAA;AAIC,GAfJ,CAgBE;;;AAED,EAAA,KAAA,GAAA,YAAa,CAAA,IAAb,CAAa,UAAb,KAAa,aAAA,CAAA,IAAA,CAAA,UAAA,CAAb;;AACA,MAAA,KAAA,EAAQ;AACR,QAAI,aAAO,GAAA,KAAA,CAAA,CAAA,CAAX;AACE,WAAA;AACA,MAAA,IAAA,EAAA,QAAO,CAAA,aAAA,EAAA,EAAA,CAAP,GAAO,GADP;AAEE,MAAA,cAAM,EAAA,UAAS,CAAA,KAAT,CAAS,aAAwB,CAAA,MAAjC;AAFR,KAAA;AAIC,GAzBJ,CA0BE;;;AAED,SAAA;AACA,IAAA,IAAA,EAAA;AADA,GAAA;AAGC;;AACH,SAAC,SAAD,CAAC,UAAD,EAAC,IAAD,EAAC;AAED;AACE,MAAA,IAAA,KAAA,IAAA,EAAA;AACA,WAAI,IAAJ;AACE;;AACD,MAAA,KAAA;AAED,MAAA,IAAA;AACA,MAAA,KAAA;AACA,MAAA,IAAA,CAVD,CAWC;;AAEA,MAAA,UAAO,CAAA,MAAP,KAAO,CAAP,EAAO;AACP,IAAA,IAAI,GAAA,IAAA,IAAA,CAAW,CAAX,CAAJ;QACE,CAAA,c,CAAgB,I;AAChB,WAAA,IAAA;AACA,GAjBH,CAkBE;;;AAED,EAAA,KAAA,GAAA,YAAU,CAAA,IAAV,CAAU,UAAV,CAAA;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,IAAI,GAAA,IAAO,IAAP,CAAO,CAAP,CAAJ;AACE,IAAA,KAAA,GAAI,QAAO,CAAA,KAAO,CAAA,CAAA,CAAP,EAAO,EAAP,CAAP,GAAc,CAAlB;QACA,CAAA,c,CAAgB,I,EAAM,K;AACtB,WAAA,IAAA;AACA,GA1BH,CA2BE;;;AAED,EAAA,KAAA,GAAA,aAAA,CAAA,IAAA,CAAsB,UAAtB,CAAA;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,IAAI,GAAA,IAAO,IAAP,CAAO,CAAP,CAAJ;QACE,SAAO,GAAI,QAAO,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,C;QAClB,CAAA,c,CAAkB,I,EAAA,C,EAAS,S;AAC3B,WAAA,IAAA;AACA,GAnCH,CAoCE;;;AAED,EAAA,KAAA,GAAA,cAAA,CAAA,IAAA,CAAyB,UAAzB,CAAA;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,IAAI,GAAA,IAAO,IAAP,CAAO,CAAP,CAAJ;AACE,IAAA,KAAA,GAAI,QAAO,CAAA,KAAO,CAAA,CAAA,CAAP,EAAO,EAAP,CAAP,GAAc,CAAlB;QACA,GAAA,GAAK,QAAG,CAAA,KAAS,CAAA,CAAA,CAAT,EAAiB,EAAjB,C;QACR,CAAA,c,CAAY,I,EAAS,K,EAAU,G;AAC/B,WAAA,IAAA;AACA,GA7CH,CA8CE;;;AAED,EAAA,KAAA,GAAA,aAAA,CAAA,IAAA,CAAsB,UAAtB,CAAA;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,IAAI,GAAA,QAAO,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAP,GAAO,CAAX;AACE,WAAA,YAAe,CAAC,IAAD,EAAO,IAAP,CAAf;AACA,GApDH,CAqDE;;;AAED,EAAA,KAAA,GAAA,cAAA,CAAA,IAAA,CAAyB,UAAzB,CAAA;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,IAAI,GAAA,QAAO,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAP,GAAO,CAAX;QACE,SAAO,GAAA,QAAS,CAAK,KAAK,CAAA,CAAA,CAAV,EAAa,EAAb,CAAT,GAA0B,C;AACjC,WAAA,YAAe,CAAG,IAAH,EAAG,IAAH,EAAY,SAAZ,CAAf;AACA,GA5DH,CA6DE;;;AAED,SAAA,IAAA;AACA;;AACF,SAAC,SAAD,CAAC,UAAD,EAAC;AAED,MAAA,KAAA;AACE,MAAA,KAAA;AACA,MAAA,OAAA,CAJD,CAKC;;AAEA,EAAA,KAAA,GAAK,YAAA,CAAA,IAAA,CAAA,UAAA,CAAL;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,KAAI,GAAA,UAAO,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CAAX;AACE,WAAA,KAAQ,GAAA,EAAR,GAAkB,oBAAlB;AACA,GAXH,CAYE;;;AAED,EAAA,KAAA,GAAA,cAAgB,CAAA,IAAhB,CAAgB,UAAhB,CAAA;;AACA,MAAA,KAAA,EAAQ;AACR,IAAA,KAAI,GAAA,QAAO,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAX;AACE,IAAA,OAAA,GAAK,UAAW,CAAC,KAAK,CAAC,CAAD,CAAL,CAAQ,OAAR,CAAa,GAAb,EAAa,GAAb,CAAD,CAAhB;AACA,WACA,KAAA,GAAO,E,GACJ,oB,GAAc,OAAoB,GAAG,sBAFxC;AAMF,GAxBD,CAyBC;;;AACA,EAAA,KAAA,GAAI,gBAAO,CAAA,IAAP,CAAO,UAAP,CAAJ;;MACE,K,EAAK;AACL,IAAA,KAAA,GAAA,QAAU,CAAA,KAAQ,CAAC,CAAD,CAAR,EAAS,EAAT,CAAV;AACA,IAAA,OAAA,GAAM,QAAU,CAAA,KAAA,CAAA,CAAA,CAAA,EAAW,EAAX,CAAhB;QACA,OAAO,GACJ,UAAW,CAAA,KAAG,CAAA,CAAA,CAAH,CAAG,OAAH,CAAG,GAAH,EAAuB,GAAvB,CAAA,C;AACZ,W,KACA,GAAA,E,GAAO,oB,GAEV,OAAA,GAAA,sB,GAED,OAAA,GAAA,IALI;AAOL,GAvCA,CAyCD;;;AACE,SAAI,IAAJ;AACA;;AAEA,SAAI,aAAJ,CAAI,cAAJ,EAAI;AACJ,MAAA,KAAA;AACA,MAAA,cAAA,CAFI,CAGF;;AACD,EAAA,KAAA,GAAA,mBAAA,CAAA,IAAA,CAAA,cAAA,CAAA;;AAED,MAAA,KAAA,EAAM;AACN,WAAK,CAAL;AACA,GARI,CASF;;;OACA,GAAA,oBAAoB,CAAG,IAAvB,CAA2B,cAA3B,C;;AACD,MAAA,KAAA,EAAA;AAED,IAAA,cAAA,GAAA,QAAkB,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAlB,GAAkB,EAAlB;AACA,WAAK,KAAG,CAAA,CAAA,CAAH,KAAG,GAAH,GAAG,CAAA,cAAH,GAA+B,cAApC;AACA,GAfI,CAgBF;;;OACA,GAAA,sBAAwB,CAAC,IAAzB,CAA2B,cAA3B,C;;AACD,MAAA,KAAA,EAAA;AAED,IAAA,cAAQ,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAA,EAAA,GAAA,QAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAR;AACD,WAAA,KAAA,CAAA,CAAA,CAAA,KAAA,GAAA,GAAA,CAAA,cAAA,GAAA,cAAA;AAED;;AAAuC,SAAA,CAAA;AAAU;;AAC/C,SAAM,YAAN,CAAiB,OAAjB,EAAwB,IAAxB,EAAwB,GAAxB,EAAwB;AACxB,MAAA,IAAK,KAAA,KAAA,CAAL,EAAmB;AACnB,IAAA,IAAM,GAAA,CAAN;AACA;;AACA,MAAA,GAAK,KAAA,KAAU,CAAf,EAAgB;AAChB,IAAA,GAAA,GAAA,CAAA;AACD;;AAED,MAAA,IAAS,GAAA,IAAA,IAAA,CAAA,CAAA,CAAT;AACE,EAAA,IAAA,CAAA,cAAA,CAAiB,OAAjB,EAAsB,CAAtB,EAAgC,CAAhC;AACA,MAAA,kBAAM,GAAkB,IAAG,CAAA,SAAH,MAAQ,CAAhC;AACA,MAAA,IAAK,GAAA,IAAA,GAAW,CAAX,GAAe,GAAf,GAAgB,CAAhB,GAAgB,kBAArB;AACA,EAAA,IAAA,CAAA,UAAA,CAAM,IAAA,CAAA,UAAA,KAAA,IAAN;AAGA,SAAA,IAAA;AAEE;;AAEJ,SAAC,+BAAD,CAAC,SAAD,EAAC","sourceRoot":"","sourcesContent":["'use strict'\nObject.defineProperty(exports, '__esModule', { value: true })\nvar date_fns_1 = require('date-fns')\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\nvar parseTokenDateTimeDelimeter = /[T ]/\nvar parseTokenPlainTime = /:/\n// year tokens\nvar parseTokenYY = /^(\\d{2})$/\nvar parseTokensYYY = [\n  /^([+-]\\d{2})$/,\n  /^([+-]\\d{3})$/,\n  /^([+-]\\d{4})$/ // 2 additional digits\n]\nvar parseTokenYYYY = /^(\\d{4})/\nvar parseTokensYYYYY = [\n  /^([+-]\\d{4})/,\n  /^([+-]\\d{5})/,\n  /^([+-]\\d{6})/ // 2 additional digits\n]\n// date tokens\nvar parseTokenMM = /^-(\\d{2})$/\nvar parseTokenDDD = /^-?(\\d{3})$/\nvar parseTokenMMDD = /^-?(\\d{2})-?(\\d{2})$/\nvar parseTokenWww = /^-?W(\\d{2})$/\nvar parseTokenWwwD = /^-?W(\\d{2})-?(\\d{1})$/\n// time tokens\nvar parseTokenHH = /^(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMM = /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\nvar parseTokenHHMMSS = /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/\n// timezone tokens\nvar parseTokenTimezone = /([Z+-].*)$/\nvar parseTokenTimezoneZ = /^(Z)$/\nvar parseTokenTimezoneHH = /^([+-])(\\d{2})$/\nvar parseTokenTimezoneHHMM = /^([+-])(\\d{2}):?(\\d{2})$/\nfunction legacyParse(argument, options) {\n  if (options === void 0) {\n    options = {}\n  }\n  if (date_fns_1.isDate(argument)) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument !== 'string') {\n    return new Date(argument)\n  }\n  var additionalDigits =\n    options.additionalDigits == null\n      ? DEFAULT_ADDITIONAL_DIGITS\n      : Number(options.additionalDigits)\n  var dateStrings = splitDateString(argument)\n  var parseYearResult = parseYear(dateStrings.date || '', additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n  var date = parseDate(restDateString || '', year)\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset = void 0\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time) || 0\n    }\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone) * MILLISECONDS_IN_MINUTE\n    } else {\n      var fullTime = timestamp + time\n      var fullTimeDate = new Date(fullTime)\n      offset = getTimezoneOffsetInMilliseconds(fullTimeDate)\n      // Adjust time when it's coming from DST\n      var fullTimeDateNextDay = new Date(fullTime)\n      fullTimeDateNextDay.setDate(fullTimeDate.getDate() + 1)\n      var offsetDiff =\n        getTimezoneOffsetInMilliseconds(fullTimeDateNextDay) -\n        getTimezoneOffsetInMilliseconds(fullTimeDate)\n      if (offsetDiff > 0) {\n        offset += offsetDiff\n      }\n    }\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(argument)\n  }\n}\nexports.default = legacyParse\nfunction splitDateString(dateString) {\n  var array = dateString.split(parseTokenDateTimeDelimeter)\n  var timeString, date, time, timezone\n  if (parseTokenPlainTime.test(array[0])) {\n    date = undefined\n    timeString = array[0]\n  } else {\n    date = array[0]\n    timeString = array[1]\n  }\n  if (timeString) {\n    var token = parseTokenTimezone.exec(timeString)\n    if (token) {\n      time = timeString.replace(token[1], '')\n      timezone = token[1]\n    } else {\n      time = timeString\n    }\n  }\n  return {\n    date: date,\n    time: time,\n    timezone: timezone\n  }\n}\nfunction parseYear(dateString, additionalDigits) {\n  var parseTokenYYY = parseTokensYYY[additionalDigits]\n  var parseTokenYYYYY = parseTokensYYYYY[additionalDigits]\n  var token\n  // YYYY or ±YYYYY\n  token = parseTokenYYYY.exec(dateString) || parseTokenYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n  // YY or ±YYY\n  token = parseTokenYY.exec(dateString) || parseTokenYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n  var token\n  var date\n  var month\n  var week\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n  // YYYY-MM\n  token = parseTokenMM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    date.setUTCFullYear(year, month)\n    return date\n  }\n  // YYYY-DDD or YYYYDDD\n  token = parseTokenDDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n  // YYYY-MM-DD or YYYYMMDD\n  token = parseTokenMMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n  // YYYY-Www or YYYYWww\n  token = parseTokenWww.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    return dayOfISOYear(year, week)\n  }\n  // YYYY-Www-D or YYYYWwwD\n  token = parseTokenWwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n    return dayOfISOYear(year, week, dayOfWeek)\n  }\n  // Invalid ISO-formatted date\n  return null\n}\nfunction parseTime(timeString) {\n  var token\n  var hours\n  var minutes\n  // hh\n  token = parseTokenHH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n  // hh:mm or hhmm\n  token = parseTokenHHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n    return (\n      (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n    )\n  }\n  // hh:mm:ss or hhmmss\n  token = parseTokenHHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n    return (\n      (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n    )\n  }\n  // Invalid ISO-formatted time\n  return null\n}\nfunction parseTimezone(timezoneString) {\n  var token\n  var absoluteOffset\n  // Z\n  token = parseTokenTimezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n  // ±hh\n  token = parseTokenTimezoneHH.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n  // ±hh:mm or ±hhmm\n  token = parseTokenTimezoneHHMM.exec(timezoneString)\n  if (token) {\n    absoluteOffset = parseInt(token[2], 10) * 60 + parseInt(token[3], 10)\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n  return 0\n}\nfunction dayOfISOYear(isoYear, week, day) {\n  if (week === void 0) {\n    week = 0\n  }\n  if (day === void 0) {\n    day = 0\n  }\n  var date = new Date(0)\n  date.setUTCFullYear(isoYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\nfunction getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime())\n  var baseTimezoneOffset = date.getTimezoneOffset()\n  date.setSeconds(0, 0)\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE\n  return (\n    baseTimezoneOffset * MILLISECONDS_IN_MINUTE +\n    millisecondsPartOfTimezoneOffset\n  )\n}\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}