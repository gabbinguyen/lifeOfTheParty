{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NewEvent.js\";\nimport React, { Component } from 'react'; // import {Button} from 'react-bootstrap'\n\nimport { Button, Form, Grid } from 'semantic-ui-react';\nimport { DateInput, TimeInput, DateTimeInput, DatesRangeInput } from 'semantic-ui-calendar-react';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nlet eventsURL = 'http://localhost:3000/events/';\nlet eventsJSON = [];\nlet eventID = \"\";\nexport default class NewEvent extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n      console.log(this.state);\n    };\n\n    this.handleCalChange = (event, {\n      name,\n      value\n    }) => {\n      if (this.state.hasOwnProperty(name)) {\n        this.setState({\n          [name]: value\n        });\n      }\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const newEvent = {\n        name: this.state.name,\n        date: this.state.date,\n        location: this.state.location\n      };\n      fetch(\"http://localhost:3000/events\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Auth-Key': localStorage.getItem('auth_key')\n        },\n        body: JSON.stringify(newEvent)\n      }).then(res => res.json()).then(event => {\n        this.props.history.push('/dashboard');\n      });\n      this.fetchLastEvent();\n    };\n\n    this.state = {\n      name: '',\n      date: '',\n      location: '',\n      event: ' '\n    };\n  }\n\n  fetchLastEvent() {\n    fetch(eventsURL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth-Key': localStorage.getItem('auth_key')\n      }\n    }).then(res => res.json()).then(function (json) {\n      eventsJSON = json;\n      eventID = eventsJSON[eventsJSON.length - 1];\n      const newCollab = {\n        event_id: eventID.id,\n        user_id: eventID.user_id\n      };\n      fetch(\"http://localhost:3000/collaborators\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          'Auth-Key': localStorage.getItem('auth_key')\n        },\n        body: JSON.stringify(newCollab)\n      }).then(res => res.json());\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        columns: 3,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          size: \"huge\",\n          onSubmit: this.handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n            children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n              children: /*#__PURE__*/_jsxDEV(Form.Field, {\n                onChange: this.handleChange,\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"name\",\n                  value: this.state.name,\n                  placeholder: \"Type of Event\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n              children: /*#__PURE__*/_jsxDEV(Form.Field, {\n                onChange: this.handleChange,\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"location\",\n                  value: this.state.location,\n                  placeholder: \"Location\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 7\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 9,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            size: \"huge\",\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n              onChange: this.handleChange,\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                value: this.state.name,\n                placeholder: \"Type of Event\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              onChange: this.handleChange,\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"location\",\n                value: this.state.location,\n                placeholder: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              children: /*#__PURE__*/_jsxDEV(SemanticDatepicker, {\n                format: \"MM-DD-YYYY\",\n                value: this.state.date,\n                onChange: this.handleCalChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"huge\",\n              type: \"submit\",\n              \"text-align\": \"center\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/NewEvent.js"],"names":["React","Component","Button","Form","Grid","DateInput","TimeInput","DateTimeInput","DatesRangeInput","SemanticDatepicker","eventsURL","eventsJSON","eventID","NewEvent","constructor","handleChange","e","name","value","target","setState","console","log","state","handleCalChange","event","hasOwnProperty","handleSubmit","preventDefault","newEvent","date","location","fetch","method","headers","localStorage","getItem","body","JSON","stringify","then","res","json","props","history","push","fetchLastEvent","length","newCollab","event_id","id","user_id","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import {Button} from 'react-bootstrap'\nimport { Button, Form, Grid } from 'semantic-ui-react'\nimport {\n    DateInput,\n    TimeInput,\n    DateTimeInput,\n    DatesRangeInput\n  } from 'semantic-ui-calendar-react';\n\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\n \n\nlet eventsURL = 'http://localhost:3000/events/'\nlet eventsJSON = []\nlet eventID = \"\"\n\nexport default class NewEvent extends Component {\n    constructor(){\n        super()\n        this.state = {\n            name: '',\n            date: '',\n            location: '',\n            event: ' '\n        }\n    }\n\n    handleChange=(e)=> {\n        const {name, value} = e.target\n        this.setState({\n            [name]: value\n        })\n        console.log(this.state)\n    }\n\n    handleCalChange = (event, {name, value}) => {\n        if (this.state.hasOwnProperty(name)) {\n          this.setState({ [name]: value });\n        }\n      }\n\n\n    handleSubmit=(e)=>{\n        e.preventDefault()\n        const newEvent={\n            name: this.state.name,\n            date: this.state.date,\n            location: this.state.location\n        }\n        fetch(\"http://localhost:3000/events\", {\n            method: \"POST\",\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            },\n            body: JSON.stringify(newEvent)\n        })\n        .then(res=>res.json())\n        .then(event=>{this.props.history.push('/dashboard')})\n        this.fetchLastEvent()\n    }\n\n    fetchLastEvent() {\n        fetch(eventsURL, {\n            method:'GET',\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            }\n        })\n        .then(res => res.json())\n        .then(function(json){\n              eventsJSON = json;\n              eventID = eventsJSON[eventsJSON.length -1]\n              const newCollab={\n                event_id: eventID.id,\n                user_id: eventID.user_id\n            }\n            fetch(\"http://localhost:3000/collaborators\", {\n                method: \"POST\",\n                headers:{\n                    'Content-Type': 'application/json',\n                    'Auth-Key': localStorage.getItem('auth_key')\n                },\n                body: JSON.stringify(newCollab)\n            })\n                .then(res => res.json())\n            })      \n    }\n\n    render() {\n        return (\n            <div>\n                  <Grid columns={3}>\n                  <Form size=\"huge\" onSubmit={this.handleSubmit}> \n\n                    <Grid.Row>\n                    <Grid.Column>\n                    <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Type of Event\" />\n                        </Form.Field>\n                    </Grid.Column>\n\n                    <Grid.Column>\n                    <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" />\n                        </Form.Field>\n                                            </Grid.Column>\n                    </Grid.Row>\n                    </Form>\n                </Grid>\n\n\n\n                <Grid> \n\n\n\n                    <Grid.Column width ={7}> \n                    </Grid.Column>\n\n                    <Grid.Column width ={9}> \n                    <Form size=\"huge\" onSubmit={this.handleSubmit}> \n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Type of Event\" />\n                        </Form.Field>\n                        <Form.Field onChange={this.handleChange}> \n                        <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" />\n                        </Form.Field>\n                        <Form.Field > \n                        <SemanticDatepicker format=\"MM-DD-YYYY\" value={this.state.date} onChange={this.handleCalChange} />\n\n                        {/* <DateInput inline name=\"date\" /> */}\n                        {/* <input type=\"text\" name=\"date\" value={this.state.date} placeholder= \"Date\" /> */}\n                        </Form.Field>\n\n                        <Button  size=\"huge\" type=\"submit\" text-align=\"center\">Submit</Button>\n                    </Form>\n                    </Grid.Column>\n\n                    <Grid.Column width ={1}> \n                    </Grid.Column>\n\n                </Grid>\n\n            {/* <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"name\" value={this.state.name} placeholder =\"Type of Event\" onChange={this.handleChange}/><br></br>        \n                <input type=\"text\" name=\"date\" value={this.state.date} placeholder= \"Date\" onChange={this.handleChange}/><br></br>\n                <input type=\"text\" name=\"location\" value={this.state.location} placeholder= \"Location\" onChange={this.handleChange}/><br></br>\n                <Button type=\"submit\" text-align=\"center\">Submit</Button>\n            </form>             */}\n        </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}