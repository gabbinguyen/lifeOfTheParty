{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/EventContainer.js\";\nimport React, { Component } from 'react';\nimport EventCard from './EventCard';\nimport { Button, Card, Row, Col } from 'react-bootstrap';\nlet eventsURL = 'http://localhost:3000/events/';\nexport default class EventContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: []\n    };\n\n    this.newAccomHandler = data => {\n      this.setState({\n        events: data\n      });\n    };\n\n    this.newActHandler = data => {\n      this.setState({\n        events: data\n      });\n    };\n\n    this.handleDelete = event => {\n      fetch(`http://localhost:3000/events/${event.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Auth-Key': localStorage.getItem('auth_key')\n        }\n      });\n      let array = this.state.events;\n      let i = array.indexOf(event);\n\n      if (i > -1) {\n        array.splice(i, 1);\n      }\n\n      this.setState({\n        events: array\n      });\n    };\n\n    this.handleActDelete = activity => {\n      let events = this.state.events.filter(event => event.id !== activity.event_id);\n      fetch(`http://localhost:3000/activities/${activity.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Auth-Key': localStorage.getItem('auth_key')\n        }\n      });\n      let event = this.state.events.filter(event => event.id == activity.event_id);\n      let totalEvents = [...events, event[0]];\n      console.log(totalEvents);\n      let filteredEvent = event[0];\n      let filteredAct = event[0].activities; // let newEvent = [...filteredEvent].filter(filteredAct)\n\n      console.log(filteredEvent); // let array = this.state.events;\n\n      let i = filteredEvent.activities.indexOf(activity);\n\n      if (i > -1) {\n        filteredEvent.activities.splice(i, 1);\n      } // this.setState({\n      //     events: array\n      // })\n\n    };\n  }\n\n  componentDidMount() {\n    fetch(eventsURL, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Auth-Key': localStorage.getItem('auth_key')\n      }\n    }).then(res => res.json()).then(events => {\n      this.setState({\n        events\n      });\n    });\n  }\n\n  // componentDidUpdate(prevProps, prevState){\n  //     if (prevState.events !== this.state.events){\n  //        fetch(eventsURL)\n  //                .then(res=>res.json())\n  //                .then(events=> this.setState({events}))\n  //     }\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.events.map(event => /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(EventCard, {\n          event: event,\n          name: event.name,\n          date: event.date,\n          collaborators: event.collaborators // flicollab={event.flights.map(flight=>flight.collaborator.user.name)}\n          ,\n          activities: event.activities,\n          accommodations: event.accommodations,\n          expenses: event.expenses,\n          flights: event.flights,\n          location: event.location,\n          handleDelete: this.handleDelete,\n          newAccom: this.newAccomHandler,\n          newAct: this.newActHandler,\n          actDelete: this.handleActDelete,\n          handleEditEvent: this.handleEditEvent\n        }, event.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/gabbinguyen/Flatiron/code/Projects/LifeOfTheParty/frontend/src/components/EventContainer.js"],"names":["React","Component","EventCard","Button","Card","Row","Col","eventsURL","EventContainer","state","events","newAccomHandler","data","setState","newActHandler","handleDelete","event","fetch","id","method","headers","localStorage","getItem","array","i","indexOf","splice","handleActDelete","activity","filter","event_id","totalEvents","console","log","filteredEvent","filteredAct","activities","componentDidMount","then","res","json","render","map","name","date","collaborators","accommodations","expenses","flights","location","handleEditEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport EventCard from './EventCard'\nimport {Button, Card, Row, Col} from 'react-bootstrap'\n\nlet eventsURL = 'http://localhost:3000/events/'\n\nexport default class EventContainer extends Component {\n    state={\n        events: []\n    }\n\n    componentDidMount(){\n        fetch(eventsURL, {\n            method:'GET',\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            }\n        })\n        .then(res => res.json())\n        .then(events => {\n            this.setState({events})\n        })\n    }\n\n    newAccomHandler = (data) => {\n        this.setState({events: data})    \n    }\n\n    newActHandler = (data) => {\n        this.setState({events: data})\n    }\n\n// Event Delete\n    handleDelete = (event) => {\n        fetch(`http://localhost:3000/events/${event.id}`, {\n            method: 'DELETE',\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            }\n        })\n        let array = this.state.events;\n        \n        let i = array.indexOf(event);\n            if (i > -1) {\n                array.splice(i, 1);\n            }\n        this.setState({\n            events: array\n        })\n    }\n\n// Activities Delete\n    handleActDelete = (activity) => {\n        let events = this.state.events.filter(event=>event.id !== activity.event_id)\n        fetch(`http://localhost:3000/activities/${activity.id}`, {\n            method: 'DELETE',\n            headers:{\n                'Content-Type': 'application/json',\n                'Auth-Key': localStorage.getItem('auth_key')\n            }\n        })\n\n        let event = this.state.events.filter(event => event.id == activity.event_id)\n        let totalEvents = [...events,event[0]]\n        console.log(totalEvents)\n        let filteredEvent = event[0]\n        let filteredAct = event[0].activities\n        // let newEvent = [...filteredEvent].filter(filteredAct)\n        console.log(filteredEvent)\n\n        // let array = this.state.events;\n        \n        let i = filteredEvent.activities.indexOf(activity);\n            if (i > -1) {\n                filteredEvent.activities.splice(i, 1);\n            }\n\n        // this.setState({\n        //     events: array\n        // })\n    }\n\n    // componentDidUpdate(prevProps, prevState){\n    //     if (prevState.events !== this.state.events){\n    //        fetch(eventsURL)\n    //                .then(res=>res.json())\n    //                .then(events=> this.setState({events}))\n    //     }\n\n    // }\n    \n\n    render() {\n        return (\n            <div>\n            {this.state.events.map(event => \n                <Card > \n                    <EventCard \n                        key={event.id}\n                        event={event}\n                        name={event.name} \n                        date={event.date}\n                        collaborators={event.collaborators} \n                        // flicollab={event.flights.map(flight=>flight.collaborator.user.name)}\n                        activities={event.activities}\n                        accommodations={event.accommodations}\n                        expenses={event.expenses}\n                        flights={event.flights}\n                        location={event.location}\n                        handleDelete={this.handleDelete}\n                        newAccom={this.newAccomHandler}\n                        newAct={this.newActHandler}\n                        actDelete={this.handleActDelete}\n                        handleEditEvent={this.handleEditEvent}\n                        />\n                </Card> \n            )}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}