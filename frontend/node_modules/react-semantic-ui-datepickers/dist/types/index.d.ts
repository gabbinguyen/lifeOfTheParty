/// <reference types="react" />
import { Props as DayzedProps, RenderProps } from 'dayzed';
import { FormInputProps, SemanticICONS } from 'semantic-ui-react';
export declare type Object = {
    [key: string]: any;
};
export declare type Locale = {
    todayButton: string;
    nextMonth: string;
    previousMonth: string;
    nextYear: string;
    previousYear: string;
    weekdays: string[];
    months: string[];
};
export declare type LocaleOptions = 'bg-BG' | 'ca-ES' | 'cs-CZ' | 'de-DE' | 'en-US' | 'es-ES' | 'et-EE' | 'fi-FI' | 'fr-FR' | 'he-IL' | 'it-IT' | 'ja-JP' | 'ko-KR' | 'nb-NO' | 'nn-NO' | 'pl-PL' | 'pt-BR' | 'ru-RU' | 'sv-SE' | 'tr-TR' | 'zh-CN';
export declare type PickedDayzedProps = Pick<DayzedProps, 'date' | 'maxDate' | 'minDate' | 'firstDayOfWeek' | 'showOutsideDays'>;
export declare type PickedFormInputProps = Pick<FormInputProps, 'className' | 'disabled' | 'error' | 'iconPosition' | 'id' | 'label' | 'loading' | 'name' | 'placeholder' | 'size' | 'transparent' | 'readOnly'>;
export declare type SemanticDatepickerProps = PickedDayzedProps & PickedFormInputProps & {
    allowOnlyNumbers: boolean;
    autoComplete?: string;
    clearOnSameDateClick: boolean;
    clearable: boolean;
    clearIcon?: SemanticICONS | React.ReactElement;
    filterDate: (date: Date) => boolean;
    format: string;
    keepOpenOnClear: boolean;
    keepOpenOnSelect: boolean;
    icon?: SemanticICONS | React.ReactElement;
    inline: boolean;
    inverted: boolean;
    locale: LocaleOptions;
    onBlur: (event?: React.SyntheticEvent) => void;
    onChange: (event: React.SyntheticEvent | undefined, data: SemanticDatepickerProps) => void;
    pointing: 'left' | 'right' | 'top left' | 'top right';
    required?: boolean;
    showToday: boolean;
    type: 'basic' | 'range';
    datePickerOnly: boolean;
    value: DayzedProps['selected'] | null;
};
export declare type BaseDatePickerProps = DayzedProps & {
    children: any;
};
export interface BasicDatePickerProps extends BaseDatePickerProps {
    onChange: (event: React.SyntheticEvent, date: Date | null) => void;
    selected: Date;
}
export interface RangeDatePickerProps extends BaseDatePickerProps {
    onChange: (event: React.SyntheticEvent, dates: Date[] | null) => void;
    selected: Date[];
}
export { DayzedProps, RenderProps };
